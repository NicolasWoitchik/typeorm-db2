{"version":3,"sources":["../browser/src/driver/db2/DB2Driver.ts"],"names":[],"mappings":"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","file":"DB2Driver.js","sourcesContent":["import { Driver } from \"../Driver\";\nimport { ConnectionIsNotSetError } from \"../../error/ConnectionIsNotSetError\";\nimport { DriverPackageNotInstalledError } from \"../../error/DriverPackageNotInstalledError\";\nimport { DB2QueryRunner } from \"./DB2QueryRunner\";\nimport { ObjectLiteral } from \"../../common/ObjectLiteral\";\nimport { ColumnMetadata } from \"../../metadata/ColumnMetadata\";\nimport { DateUtils } from \"../../util/DateUtils\";\nimport { PlatformTools } from \"../../platform/PlatformTools\";\nimport { Connection } from \"../../connection/Connection\";\nimport { RdbmsSchemaBuilder } from \"../../schema-builder/RdbmsSchemaBuilder\";\nimport { DB2ConnectionOptions } from \"./DB2ConnectionOptions\";\nimport { MappedColumnTypes } from \"../types/MappedColumnTypes\";\nimport { ColumnType } from \"../types/ColumnTypes\";\nimport { DataTypeDefaults } from \"../types/DataTypeDefaults\";\nimport { TableColumn } from \"../../schema-builder/table/TableColumn\";\nimport { DB2ConnectionCredentialsOptions } from \"./DB2ConnectionCredentialsOptions\";\nimport { DriverUtils } from \"../DriverUtils\";\nimport { EntityMetadata } from \"../../metadata/EntityMetadata\";\nimport { OrmUtils } from \"../../util/OrmUtils\";\nimport { ApplyValueTransformers } from \"../../util/ApplyValueTransformers\";\nimport { ReplicationMode } from \"../types/ReplicationMode\";\n\n/**\n * Organizes communication with IBM DB2 RDBMS.\n */\nexport class DB2Driver implements Driver {\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by driver.\n     */\n    connection: Connection;\n\n    /**\n     * Underlying db2 library.\n     */\n    db2: any;\n\n    /**\n     * Pool for master database.\n     */\n    master: any;\n\n    /**\n     * Pool for slave databases.\n     * Used in replication.\n     */\n    slaves: any[] = [];\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection options.\n     */\n    options: DB2ConnectionOptions;\n\n    /**\n     * Master database used to perform all write queries.\n     */\n    database?: string;\n\n    /**\n     * Indicates if replication is enabled.\n     */\n    isReplicated: boolean = false;\n\n    /**\n     * Indicates if tree tables are supported by this driver.\n     */\n    treeSupport = true;\n\n    /**\n     * Gets list of supported column data types by a driver.\n     *\n     * @see https://www.ibm.com/support/knowledgecenter/SSEPEK_10.0.0/sqlref/src/tpc/db2z_datatypesintro.html\n     */\n    supportedDataTypes: ColumnType[] = [\n        \"smallint\",\n        \"integer\",\n        \"bigint\",\n        \"real\",\n        \"double\",\n        \"float\",\n        \"decimal\",\n        \"numeric\",\n        \"decfloat\",\n        \"varchar\",\n        \"clob\",\n        \"char\",\n        \"varbinary\",\n        \"blob\",\n        \"json\",\n        \"binary\",\n        \"dbclob\",\n        \"date\",\n        \"time\",\n        \"timestamp\",\n        \"timestamp with time zone\",\n        \"timestamp without time zone\",\n        \"boolean\",\n    ];\n\n    /**\n     * Gets list of spatial column data types.\n     */\n    spatialTypes: ColumnType[] = [];\n\n    /**\n     * Gets list of column data types that support length by a driver.\n     */\n    withLengthColumnTypes: ColumnType[] = [\"char\", \"varchar\"];\n\n    /**\n     * Gets list of column data types that support precision by a driver.\n     */\n    withPrecisionColumnTypes: ColumnType[] = [\n        \"numeric\",\n        \"decfloat\",\n        \"real\",\n        \"number\",\n        \"float\",\n        \"timestamp\",\n        \"timestamp with time zone\",\n        \"timestamp with local time zone\",\n    ];\n\n    /**\n     * Gets list of column data types that support scale by a driver.\n     */\n    withScaleColumnTypes: ColumnType[] = [\"number\"];\n\n    /**\n     * Orm has special columns and we need to know what database column types should be for those types.\n     * Column types are driver dependant.\n     */\n    mappedDataTypes: MappedColumnTypes = {\n        createDate: \"timestamp\",\n        createDateDefault: \"NOW()\",\n        updateDate: \"timestamp\",\n        updateDateDefault: \"NOW()\",\n        deleteDate: \"timestamp\",\n        deleteDateNullable: true,\n        version: \"number\",\n        treeLevel: \"number\",\n        migrationId: \"number\",\n        migrationName: \"varchar\",\n        migrationTimestamp: \"number\",\n        cacheId: \"number\",\n        cacheIdentifier: \"varchar\",\n        cacheTime: \"number\",\n        cacheDuration: \"number\",\n        cacheQuery: \"clob\",\n        cacheResult: \"clob\",\n        metadataType: \"varchar\",\n        metadataDatabase: \"varchar\",\n        metadataSchema: \"varchar\",\n        metadataTable: \"varchar\",\n        metadataName: \"varchar\",\n        metadataValue: \"clob\",\n    };\n\n    /**\n     * Default values of length, precision and scale depends on column data type.\n     * Used in the cases when length/precision/scale is not specified by user.\n     */\n    dataTypeDefaults: DataTypeDefaults = {\n        char: { length: 1 },\n        varchar: { length: 255 },\n        float: { precision: 126 },\n        timestamp: { precision: 6 },\n        \"timestamp with time zone\": { precision: 6 },\n        \"timestamp with local time zone\": { precision: 6 },\n    };\n\n    /**\n     * Max length allowed by IBM for aliases.\n     * @see https://www.ibm.com/support/knowledgecenter/SSEPEK_10.0.0/intro/src/tpc/db2z_aliases.html\n     *\n     */\n    maxAliasLength = 128;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection) {\n        this.connection = connection;\n        this.options = connection.options as DB2ConnectionOptions;\n\n        // load DB2 package\n        this.loadDependencies();\n\n        // // extra DB2 setup\n        // this.db2.outFormat = this.db2.OBJECT;\n\n        // Object.assign(connection.options, DriverUtils.buildDriverOptions(connection.options)); // todo: do it better way\n        // validate options to make sure everything is set\n        // if (!this.options.host)\n        //     throw new DriverOptionNotSetError(\"host\");\n        // if (!this.options.username)\n        //     throw new DriverOptionNotSetError(\"username\");\n        // if (!this.options.sid)\n        //     throw new DriverOptionNotSetError(\"sid\");\n        //\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     * Based on pooling options, it can either create connection immediately,\n     * either create a pool and create connection when needed.\n     */\n    async connect(): Promise<void> {\n        if (this.options.replication) {\n            this.slaves = await Promise.all(\n                this.options.replication.slaves.map((slave) => {\n                    return this.createPool(this.options, slave);\n                })\n            );\n            this.master = await this.createPool(\n                this.options,\n                this.options.replication.master\n            );\n            this.database = this.options.replication.master.database;\n        } else {\n            this.master = await this.createPool(this.options, this.options);\n            this.database = this.options.database;\n        }\n    }\n\n    /**\n     * Makes any action after connection (e.g. create extensions in Postgres driver).\n     */\n    afterConnect(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Closes connection with the database.\n     */\n    async disconnect(): Promise<void> {\n        if (!this.master)\n            return Promise.reject(new ConnectionIsNotSetError(\"DB2\"));\n\n        await this.closePool(this.master);\n        await Promise.all(this.slaves.map((slave) => this.closePool(slave)));\n        this.master = undefined;\n        this.slaves = [];\n    }\n\n    /**\n     * Creates a schema builder used to build and sync a schema.\n     */\n    createSchemaBuilder() {\n        return new RdbmsSchemaBuilder(this.connection);\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner(mode: ReplicationMode) {\n        return new DB2QueryRunner(this, mode);\n    }\n\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(\n        sql: string,\n        parameters: ObjectLiteral,\n        nativeParameters: ObjectLiteral\n    ): [string, any[]] {\n        const escapedParameters: any[] = Object.keys(nativeParameters).map(\n            (key) => {\n                if (typeof nativeParameters[key] === \"boolean\")\n                    return nativeParameters[key] ? 1 : 0;\n                return nativeParameters[key];\n            }\n        );\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, escapedParameters];\n\n        const keys = Object.keys(parameters)\n            .map((parameter) => \"(:(\\\\.\\\\.\\\\.)?\" + parameter + \"\\\\b)\")\n            .join(\"|\");\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string) => {\n            let value: any;\n            let isArray = false;\n            if (key.substr(0, 4) === \":...\") {\n                isArray = true;\n                value = parameters[key.substr(4)];\n            } else {\n                value = parameters[key.substr(1)];\n            }\n\n            if (isArray) {\n                return value\n                    .map((v: any, index: number) => {\n                        escapedParameters.push(v);\n                        return `:${key.substr(4)}${index}`;\n                    })\n                    .join(\", \");\n            } else if (value instanceof Function) {\n                return value();\n            } else if (typeof value === \"boolean\") {\n                return value ? 1 : 0;\n            } else {\n                escapedParameters.push(value);\n                return key;\n            }\n        }); // todo: make replace only in value statements, otherwise problems\n        return [sql, escapedParameters];\n    }\n\n    /**\n     * Escapes a column name.\n     */\n    escape(columnName: string): string {\n        return `\"${columnName}\"`;\n    }\n\n    /**\n     * Build full table name with database name, schema name and table name.\n     * E.g. \"mySchema\".\"myTable\"\n     */\n    buildTableName(tableName: string, schema?: string): string {\n        return schema ? `\"${schema}\".\"${tableName}\"` : tableName;\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformTo(\n                columnMetadata.transformer,\n                value\n            );\n\n        if (value === null || value === undefined) return value;\n\n        if (columnMetadata.type === Boolean) {\n            return value ? 1 : 0;\n        } else if (columnMetadata.type === \"date\") {\n            if (typeof value === \"string\")\n                value = value.replace(/[^0-9-]/g, \"\");\n            return () =>\n                `TO_DATE('${DateUtils.mixedDateToDateString(\n                    value\n                )}', 'YYYY-MM-DD')`;\n        } else if (\n            columnMetadata.type === Date ||\n            columnMetadata.type === \"timestamp\" ||\n            columnMetadata.type === \"timestamp with time zone\" ||\n            columnMetadata.type === \"timestamp with local time zone\"\n        ) {\n            return DateUtils.mixedDateToDate(value);\n        } else if (columnMetadata.type === \"simple-array\") {\n            return DateUtils.simpleArrayToString(value);\n        } else if (columnMetadata.type === \"simple-json\") {\n            return DateUtils.simpleJsonToString(value);\n        }\n\n        return value;\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\n     */\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (value === null || value === undefined)\n            return columnMetadata.transformer\n                ? ApplyValueTransformers.transformFrom(\n                      columnMetadata.transformer,\n                      value\n                  )\n                : value;\n\n        if (columnMetadata.type === Boolean) {\n            value = !!value;\n        } else if (columnMetadata.type === \"date\") {\n            value = DateUtils.mixedDateToDateString(value);\n        } else if (columnMetadata.type === \"time\") {\n            value = DateUtils.mixedTimeToString(value);\n        } else if (\n            columnMetadata.type === Date ||\n            columnMetadata.type === \"timestamp\" ||\n            columnMetadata.type === \"timestamp with time zone\" ||\n            columnMetadata.type === \"timestamp with local time zone\"\n        ) {\n            value = DateUtils.normalizeHydratedDate(value);\n        } else if (columnMetadata.type === \"json\") {\n            value = JSON.parse(value);\n        } else if (columnMetadata.type === \"simple-array\") {\n            value = DateUtils.stringToSimpleArray(value);\n        } else if (columnMetadata.type === \"simple-json\") {\n            value = DateUtils.stringToSimpleJson(value);\n        }\n\n        if (columnMetadata.transformer)\n            value = ApplyValueTransformers.transformFrom(\n                columnMetadata.transformer,\n                value\n            );\n\n        return value;\n    }\n\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    normalizeType(column: {\n        type?: ColumnType;\n        length?: number | string;\n        precision?: number | null;\n        scale?: number;\n        isArray?: boolean;\n    }): string {\n        if (\n            column.type === Number ||\n            column.type === Boolean ||\n            column.type === \"numeric\" ||\n            column.type === \"dec\" ||\n            column.type === \"decimal\" ||\n            column.type === \"int\" ||\n            column.type === \"integer\" ||\n            column.type === \"smallint\"\n        ) {\n            return \"integer\";\n        } else if (\n            column.type === \"real\" ||\n            column.type === \"double precision\"\n        ) {\n            return \"float\";\n        } else if (column.type === String || column.type === \"varchar\") {\n            return \"varchar\";\n        } else if (column.type === Date) {\n            return \"timestamp\";\n        } else if ((column.type as any) === Buffer) {\n            return \"blob\";\n        } else if (column.type === \"uuid\") {\n            return \"varchar\";\n        } else if (column.type === \"simple-array\") {\n            return \"clob\";\n        } else if (column.type === \"simple-json\") {\n            return \"clob\";\n        } else if (column.type === Object) {\n            return \"blob\";\n        } else {\n            return (column.type as string) || \"\";\n        }\n    }\n\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    normalizeDefault(columnMetadata: ColumnMetadata): string {\n        const defaultValue = columnMetadata.default;\n\n        if (typeof defaultValue === \"number\") {\n            return \"\" + defaultValue;\n        } else if (typeof defaultValue === \"boolean\") {\n            return defaultValue === true ? \"1\" : \"0\";\n        } else if (typeof defaultValue === \"function\") {\n            return defaultValue();\n        } else if (typeof defaultValue === \"string\") {\n            return `'${defaultValue}'`;\n        } else {\n            return defaultValue;\n        }\n    }\n\n    /**\n     * Normalizes \"isUnique\" value of the column.\n     */\n    normalizeIsUnique(column: ColumnMetadata): boolean {\n        return column.entityMetadata.uniques.some(\n            (uq) => uq.columns.length === 1 && uq.columns[0] === column\n        );\n    }\n\n    /**\n     * Calculates column length taking into account the default length values.\n     */\n    getColumnLength(column: ColumnMetadata | TableColumn): string {\n        if (column.length) return column.length.toString();\n\n        switch (column.type) {\n            case String:\n            case \"varchar\":\n                return \"255\";\n            case \"raw\":\n                return \"2000\";\n            case \"uuid\":\n                return \"36\";\n            default:\n                return \"\";\n        }\n    }\n\n    createFullType(column: TableColumn): string {\n        let type = column.type;\n\n        // used 'getColumnLength()' method, because in Oracle column length is required for some data types.\n        if (this.getColumnLength(column)) {\n            type += `(${this.getColumnLength(column)})`;\n        } else if (\n            column.precision !== null &&\n            column.precision !== undefined &&\n            column.scale !== null &&\n            column.scale !== undefined\n        ) {\n            type += \"(\" + column.precision + \",\" + column.scale + \")\";\n        } else if (\n            column.precision !== null &&\n            column.precision !== undefined\n        ) {\n            type += \"(\" + column.precision + \")\";\n        }\n\n        if (column.type === \"timestamp with time zone\") {\n            type =\n                \"TIMESTAMP\" +\n                (column.precision !== null && column.precision !== undefined\n                    ? \"(\" + column.precision + \")\"\n                    : \"\") +\n                \" WITH TIME ZONE\";\n        } else if (column.type === \"timestamp with local time zone\") {\n            type =\n                \"TIMESTAMP\" +\n                (column.precision !== null && column.precision !== undefined\n                    ? \"(\" + column.precision + \")\"\n                    : \"\") +\n                \" WITH LOCAL TIME ZONE\";\n        }\n\n        if (column.isArray) type += \" array\";\n\n        return type;\n    }\n\n    /**\n     * Obtains a new database connection to a master server.\n     * Used for replication.\n     * If replication is not setup then returns default connection's database connection.\n     */\n    obtainMasterConnection(): Promise<any> {\n        return new Promise<any>((ok, fail) => {\n            const credentials = Object.assign(\n                {},\n                this.options,\n                DriverUtils.buildDriverOptions(this.options)\n            ); // todo: do it better way\n\n            // build connection options for the driver\n            const connectionOptions = Object.assign(\n                {},\n                {\n                    connectString: credentials.connectString\n                        ? credentials.connectString\n                        : `DATABASE=${credentials.database};HOSTNAME=${credentials.host};PORT=${credentials.port};PROTOCOL=TCPIP;UID=${credentials.username};PWD=${credentials.password};Security=SSL`,\n                },\n                this.options.extra || {}\n            );\n            this.master.open(\n                connectionOptions.connectString,\n                (err: any, connection: any) => {\n                    if (err) return fail(err);\n                    ok(connection);\n                }\n            );\n        });\n    }\n\n    /**\n     * Obtains a new database connection to a slave server.\n     * Used for replication.\n     * If replication is not setup then returns master (default) connection's database connection.\n     */\n    obtainSlaveConnection(): Promise<any> {\n        if (!this.slaves.length) return this.obtainMasterConnection();\n\n        return new Promise<any>((ok, fail) => {\n            const random = Math.floor(Math.random() * this.slaves.length);\n            const credentials = Object.assign(\n                {},\n                this.options,\n                DriverUtils.buildDriverOptions(this.options)\n            ); // todo: do it better way\n\n            // build connection options for the driver\n            const connectionOptions = Object.assign(\n                {},\n                {\n                    connectString: credentials.connectString\n                        ? credentials.connectString\n                        : `DATABASE=${credentials.database};HOSTNAME=${credentials.host};PORT=${credentials.port};PROTOCOL=TCPIP;UID=${credentials.username};PWD=${credentials.password};Security=SSL`,\n                },\n                this.options.extra || {}\n            );\n            this.slaves[random].open(\n                connectionOptions.connectString,\n                (err: any, connection: any) => {\n                    if (err) return fail(err);\n                    ok(connection);\n                }\n            );\n        });\n    }\n\n    /**\n     * Creates generated map of values generated or returned by database after INSERT query.\n     */\n    createGeneratedMap(metadata: EntityMetadata, insertResult: ObjectLiteral) {\n        if (!insertResult) return undefined;\n\n        return Object.keys(insertResult).reduce((map, key) => {\n            const column = metadata.findColumnWithDatabaseName(key);\n            if (column) {\n                OrmUtils.mergeDeep(\n                    map,\n                    column.createValueMap(\n                        this.prepareHydratedValue(insertResult[key], column)\n                    )\n                );\n            }\n            return map;\n        }, {} as ObjectLiteral);\n    }\n\n    /**\n     * Differentiate columns of this table and columns from the given column metadatas columns\n     * and returns only changed.\n     */\n    findChangedColumns(\n        tableColumns: TableColumn[],\n        columnMetadatas: ColumnMetadata[]\n    ): ColumnMetadata[] {\n        return columnMetadatas.filter((columnMetadata) => {\n            const tableColumn = tableColumns.find(\n                (c) => c.name === columnMetadata.databaseName\n            );\n            if (!tableColumn) return false; // we don't need new columns, we only need exist and changed\n\n            return (\n                tableColumn.name !== columnMetadata.databaseName ||\n                tableColumn.type !== this.normalizeType(columnMetadata) ||\n                tableColumn.length !== columnMetadata.length ||\n                tableColumn.precision !== columnMetadata.precision ||\n                tableColumn.scale !== columnMetadata.scale ||\n                // || tableColumn.comment !== columnMetadata.comment || // todo\n                this.normalizeDefault(columnMetadata) !== tableColumn.default ||\n                tableColumn.isPrimary !== columnMetadata.isPrimary ||\n                tableColumn.isNullable !== columnMetadata.isNullable ||\n                tableColumn.isUnique !==\n                    this.normalizeIsUnique(columnMetadata) ||\n                (columnMetadata.generationStrategy !== \"uuid\" &&\n                    tableColumn.isGenerated !== columnMetadata.isGenerated)\n            );\n        });\n    }\n\n    /**\n     * Returns true if driver supports RETURNING / OUTPUT statement.\n     */\n    isReturningSqlSupported(): boolean {\n        return true;\n    }\n\n    /**\n     * Returns true if driver supports uuid values generation on its own.\n     */\n    isUUIDGenerationSupported(): boolean {\n        return false;\n    }\n\n    /**\n     * Returns true if driver supports fulltext indices.\n     */\n    isFullTextColumnTypeSupported(): boolean {\n        return false;\n    }\n\n    /**\n     * Creates an escaped parameter.\n     */\n    createParameter(parameterName: string, index: number): string {\n        return \"?\";\n        // return \":\" + (index + 1);\n    }\n\n    // /**\n    //  * Converts column type in to native oracle type.\n    //  */\n    // columnTypeToNativeParameter(type: ColumnType): any {\n    //     switch (this.normalizeType({ type: type as any })) {\n    //         case \"number\":\n    //         case \"numeric\":\n    //         case \"int\":\n    //         case \"integer\":\n    //         case \"smallint\":\n    //         case \"dec\":\n    //         case \"decimal\":\n    //             return this.db2.NUMBER;\n    //         case \"char\":\n    //         case \"nchar\":\n    //         case \"nvarchar2\":\n    //         case \"varchar2\":\n    //             return this.db2.STRING;\n    //         case \"blob\":\n    //             return this.db2.BLOB;\n    //         case \"clob\":\n    //             return this.db2.CLOB;\n    //         case \"date\":\n    //         case \"timestamp\":\n    //         case \"timestamp with time zone\":\n    //         case \"timestamp with local time zone\":\n    //             return this.db2.DATE;\n    //     }\n    // }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Loads all driver dependencies.\n     */\n    protected loadDependencies(): void {\n        try {\n            this.db2 = PlatformTools.load(\"ibm_db\");\n            if (this.options.debug) {\n                this.db2.debug(this.options.debug);\n            }\n        } catch (e) {\n            throw new DriverPackageNotInstalledError(\"DB2\", \"ibm_db\");\n        }\n    }\n\n    /**\n     * Creates a new connection pool for a given database credentials.\n     */\n    protected async createPool(\n        options: DB2ConnectionOptions,\n        credentials: DB2ConnectionCredentialsOptions\n    ): Promise<any> {\n        credentials = Object.assign(\n            {},\n            credentials,\n            DriverUtils.buildDriverOptions(credentials)\n        ); // todo: do it better way\n\n        // build connection options for the driver\n        const connectionOptions = Object.assign(\n            {},\n            {\n                connectString: credentials.connectString\n                    ? credentials.connectString\n                    : `DATABASE=${credentials.database};HOSTNAME=${credentials.host};PORT=${credentials.port};PROTOCOL=TCPIP;UID=${credentials.username};PWD=${credentials.password};Security=SSL`,\n            },\n            options.extra || {}\n        );\n\n        const pool = new this.db2.Pool(connectionOptions.connectionsString);\n\n        // pooling is enabled either when its set explicitly to true,\n        // either when its not defined at all (e.g. enabled by default)\n        return new Promise<void>((ok, fail) => {\n            const opened = pool.init(5, connectionOptions.connectionsString);\n            if (!opened) return fail(\"Failed to open pool\");\n\n            ok(pool);\n            // pool.open(connectionOptions, (err: any, pool: any) => {\n            //     if (err) return fail(err);\n            //     ok(pool);\n            // });\n        });\n    }\n\n    /**\n     * Closes connection pool.\n     */\n    protected async closePool(pool: any): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            pool.close((err: any) => (err ? fail(err) : ok()));\n            pool = undefined;\n        });\n    }\n}\n"],"sourceRoot":"../.."}