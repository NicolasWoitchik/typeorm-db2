{"version":3,"sources":["../browser/src/driver/db2/DB2QueryRunner.ts"],"names":[],"mappings":"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","file":"DB2QueryRunner.js","sourcesContent":["import { QueryRunner } from \"../../query-runner/QueryRunner\";\nimport { ObjectLiteral } from \"../../common/ObjectLiteral\";\nimport { TransactionAlreadyStartedError } from \"../../error/TransactionAlreadyStartedError\";\nimport { TransactionNotStartedError } from \"../../error/TransactionNotStartedError\";\nimport { TableColumn } from \"../../schema-builder/table/TableColumn\";\nimport { Table } from \"../../schema-builder/table/Table\";\nimport { TableForeignKey } from \"../../schema-builder/table/TableForeignKey\";\nimport { TableIndex } from \"../../schema-builder/table/TableIndex\";\nimport { QueryRunnerAlreadyReleasedError } from \"../../error/QueryRunnerAlreadyReleasedError\";\nimport { View } from \"../../schema-builder/view/View\";\nimport { Query } from \"../Query\";\nimport { DB2Driver } from \"./DB2Driver\";\nimport { ReadStream } from \"../../platform/PlatformTools\";\nimport { QueryFailedError } from \"../../error/QueryFailedError\";\nimport { TableUnique } from \"../../schema-builder/table/TableUnique\";\nimport { Broadcaster } from \"../../subscriber/Broadcaster\";\nimport { BaseQueryRunner } from \"../../query-runner/BaseQueryRunner\";\nimport { OrmUtils } from \"../../util/OrmUtils\";\nimport { TableCheck } from \"../../schema-builder/table/TableCheck\";\nimport { ColumnType } from \"../../index\";\nimport { IsolationLevel } from \"../types/IsolationLevel\";\nimport { TableExclusion } from \"../../schema-builder/table/TableExclusion\";\nimport { ReplicationMode } from \"../types/ReplicationMode\";\nimport { BroadcasterResult } from \"../../subscriber/BroadcasterResult\";\nimport { Database } from \"ibm_db\";\n\n/**\n * Runs queries on a single DB2 database connection.\n */\nexport class DB2QueryRunner extends BaseQueryRunner implements QueryRunner {\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Database driver used by connection.\n     */\n    driver: DB2Driver;\n\n    // -------------------------------------------------------------------------\n    // Protected Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Promise used to obtain a database connection for a first time.\n     */\n    protected databaseConnectionPromise: Promise<any>;\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(driver: DB2Driver, mode: ReplicationMode) {\n        super();\n        this.driver = driver;\n        this.connection = driver.connection;\n        this.broadcaster = new Broadcaster(this);\n        this.mode = mode;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Creates/uses database connection from the connection pool to perform further operations.\n     * Returns obtained database connection.\n     */\n    connect(): Promise<Database> {\n        if (this.databaseConnection)\n            return Promise.resolve(this.databaseConnection);\n\n        if (this.databaseConnectionPromise)\n            return this.databaseConnectionPromise;\n\n        if (this.mode === \"slave\" && this.driver.isReplicated) {\n            this.databaseConnectionPromise = this.driver\n                .obtainSlaveConnection()\n                .then((connection) => {\n                    this.databaseConnection = connection;\n                    return this.databaseConnection;\n                });\n        } else {\n            // master\n            this.databaseConnectionPromise = this.driver\n                .obtainMasterConnection()\n                .then((connection) => {\n                    this.databaseConnection = connection;\n                    return this.databaseConnection;\n                });\n        }\n\n        return this.databaseConnectionPromise;\n    }\n\n    /**\n     * Releases used database connection.\n     * You cannot use query runner methods once its released.\n     */\n    release(): Promise<void> {\n        return new Promise<void>((ok, fail) => {\n            this.isReleased = true;\n            if (this.databaseConnection) {\n                this.databaseConnection.close((err: any) => {\n                    if (err) return fail(err);\n\n                    ok();\n                });\n            } else {\n                ok();\n            }\n        });\n    }\n\n    /**\n     * Starts transaction.\n     */\n    async startTransaction(isolationLevel?: IsolationLevel): Promise<void> {\n        if (this.isTransactionActive)\n            throw new TransactionAlreadyStartedError();\n\n        const beforeBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastBeforeTransactionStartEvent(\n            beforeBroadcastResult\n        );\n        if (beforeBroadcastResult.promises.length > 0)\n            await Promise.all(beforeBroadcastResult.promises);\n\n        this.isTransactionActive = true;\n        await this.query(\"BEGIN TRANSACTION\");\n        if (isolationLevel) {\n            await this.query(\n                \"SET TRANSACTION ISOLATION LEVEL \" + isolationLevel\n            );\n        }\n\n        const afterBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastAfterTransactionStartEvent(\n            afterBroadcastResult\n        );\n        if (afterBroadcastResult.promises.length > 0)\n            await Promise.all(afterBroadcastResult.promises);\n    }\n\n    /**\n     * Commits transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async commitTransaction(): Promise<void> {\n        if (!this.isTransactionActive) throw new TransactionNotStartedError();\n\n        const beforeBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastBeforeTransactionCommitEvent(\n            beforeBroadcastResult\n        );\n        if (beforeBroadcastResult.promises.length > 0)\n            await Promise.all(beforeBroadcastResult.promises);\n\n        await this.query(\"COMMIT\");\n        this.isTransactionActive = false;\n\n        const afterBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastAfterTransactionCommitEvent(\n            afterBroadcastResult\n        );\n        if (afterBroadcastResult.promises.length > 0)\n            await Promise.all(afterBroadcastResult.promises);\n    }\n\n    /**\n     * Rollbacks transaction.\n     * Error will be thrown if transaction was not started.\n     */\n    async rollbackTransaction(): Promise<void> {\n        if (!this.isTransactionActive) throw new TransactionNotStartedError();\n\n        const beforeBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastBeforeTransactionRollbackEvent(\n            beforeBroadcastResult\n        );\n        if (beforeBroadcastResult.promises.length > 0)\n            await Promise.all(beforeBroadcastResult.promises);\n\n        await this.query(\"ROLLBACK\");\n        this.isTransactionActive = false;\n\n        const afterBroadcastResult = new BroadcasterResult();\n        this.broadcaster.broadcastAfterTransactionRollbackEvent(\n            afterBroadcastResult\n        );\n        if (afterBroadcastResult.promises.length > 0)\n            await Promise.all(afterBroadcastResult.promises);\n    }\n\n    /**\n     * Executes a given SQL query.\n     */\n    query(query: string, parameters?: any[]): Promise<any> {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError();\n\n        return new Promise(async (ok, fail) => {\n            try {\n                this.driver.connection.logger.logQuery(query, parameters, this);\n                const queryStartTime = +new Date();\n\n                const databaseConnection = await this.connect();\n                databaseConnection.query(\n                    query,\n                    parameters || [],\n                    (err: any, result: any) => {\n                        // log slow queries if maxQueryExecution time is set\n                        const maxQueryExecutionTime = this.driver.connection\n                            .options.maxQueryExecutionTime;\n                        const queryEndTime = +new Date();\n                        const queryExecutionTime =\n                            queryEndTime - queryStartTime;\n                        if (\n                            maxQueryExecutionTime &&\n                            queryExecutionTime > maxQueryExecutionTime\n                        )\n                            this.driver.connection.logger.logQuerySlow(\n                                queryExecutionTime,\n                                query,\n                                parameters,\n                                this\n                            );\n\n                        if (err) {\n                            this.driver.connection.logger.logQueryError(\n                                err,\n                                query,\n                                parameters,\n                                this\n                            );\n                            return fail(\n                                new QueryFailedError(query, parameters, err)\n                            );\n                        }\n                        // TODO: find better solution. Must return result instead of properties\n                        ok(result);\n                    }\n                );\n            } catch (err) {\n                fail(err);\n            }\n        });\n    }\n\n    /**\n     * Returns raw data stream.\n     */\n    stream(\n        query: string,\n        parameters?: any[],\n        onEnd?: Function,\n        onError?: Function\n    ): Promise<ReadStream> {\n        if (this.isReleased) throw new QueryRunnerAlreadyReleasedError();\n\n        return new Promise(async (ok, fail) => {\n            try {\n                const databaseConnection = await this.connect();\n                this.driver.connection.logger.logQuery(query, parameters, this);\n                const stream = databaseConnection.queryStream(\n                    query,\n                    parameters || []\n                );\n                if (onEnd) stream.on(\"end\", onEnd);\n                if (onError) stream.on(\"error\", onError);\n                ok(stream);\n            } catch (err) {\n                fail(err);\n            }\n        });\n    }\n\n    /**\n     * Returns all available database names including system databases.\n     */\n    async getDatabases(): Promise<string[]> {\n        return Promise.resolve([]);\n    }\n\n    /**\n     * Returns all available schema names including system schemas.\n     * If database parameter specified, returns schemas of that database.\n     */\n    async getSchemas(database?: string): Promise<string[]> {\n        return Promise.resolve([]);\n    }\n\n    /**\n     * Checks if database with the given name exist.\n     */\n    async hasDatabase(database: string): Promise<boolean> {\n        return Promise.resolve(false);\n    }\n\n    /**\n     * Checks if schema with the given name exist.\n     */\n    async hasSchema(schema: string): Promise<boolean> {\n        // .schema(\"SYSIBM\")\n        // .select([\"CREATOR AS SCHEMA\", \"NAME as TABLE\"])\n        // .where(\"CREATOR\", \"CID_%\", true, \"LIKE\")\n        // .orWhere(\"CREATOR\", \"HEADER_%\", true, \"LIKE\")\n        // // .limit(5)\n        // .get(\"SYSTABLES\");\n\n        const result = await this.query(\n            `SELECT * FROM \"SYSIBM\".\"SYSTABLES\" WHERE \"CREATOR\" = '${schema}'`\n        );\n        return result.length ? true : false;\n    }\n\n    /**\n     * Checks if table with the given name exist in the database.\n     */\n    async hasTable(tableOrName: Table | string): Promise<boolean> {\n        const tableName =\n            tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        const sql = `SELECT \"NAME\" FROM \"SYSIBM\".\"SYSTABLES\" WHERE \"NAME\" = '${tableName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Checks if column with the given name exist in the given table.\n     */\n    async hasColumn(\n        tableOrName: Table | string,\n        columnName: string\n    ): Promise<boolean> {\n        const tableName =\n            tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        const sql = `SELECT \"NAME\" FROM \"SYSIBM\".\"SYSCOLUMNS\" WHERE \"TBNAME\" = '${tableName}' AND \"NAME\" = '${columnName}'`;\n        const result = await this.query(sql);\n        return result.length ? true : false;\n    }\n\n    /**\n     * Creates a new database.\n     */\n    async createDatabase(\n        database: string,\n        ifNotExist?: boolean\n    ): Promise<void> {\n        await this.query(`CREATE DATABASE IF NOT EXISTS \"${database}\"`);\n    }\n\n    /**\n     * Drops database.\n     */\n    async dropDatabase(database: string, ifExist?: boolean): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Creates a new table schema.\n     */\n    async createSchema(schema: string, ifNotExist?: boolean): Promise<void> {\n        const up = ifNotExist\n            ? `CREATE SCHEMA IF NOT EXISTS \"${schema}\"`\n            : `CREATE SCHEMA \"${schema}\"`;\n        const down = `DROP SCHEMA \"${schema}\" CASCADE`;\n        await this.executeQueries(new Query(up), new Query(down));\n    }\n\n    /**\n     * Drops table schema.\n     */\n    async dropSchema(\n        schemaPath: string,\n        ifExist?: boolean,\n        isCascade?: boolean\n    ): Promise<void> {\n        const schema =\n            schemaPath.indexOf(\".\") === -1\n                ? schemaPath\n                : schemaPath.split(\".\")[0];\n        const up = ifExist\n            ? `DROP SCHEMA IF EXISTS \"${schema}\" ${isCascade ? \"CASCADE\" : \"\"}`\n            : `DROP SCHEMA \"${schema}\" ${isCascade ? \"CASCADE\" : \"\"}`;\n        const down = `CREATE SCHEMA \"${schema}\"`;\n        await this.executeQueries(new Query(up), new Query(down));\n    }\n\n    /**\n     * Creates a new table.\n     */\n    async createTable(\n        table: Table,\n        ifNotExist: boolean = false,\n        createForeignKeys: boolean = true,\n        createIndices: boolean = true\n    ): Promise<void> {\n        if (ifNotExist) {\n            const isTableExist = await this.hasTable(table);\n            if (isTableExist) return Promise.resolve();\n        }\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        upQueries.push(this.createTableSql(table, createForeignKeys));\n        downQueries.push(this.dropTableSql(table));\n\n        // if createForeignKeys is true, we must drop created foreign keys in down query.\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n        if (createForeignKeys)\n            table.foreignKeys.forEach((foreignKey) =>\n                downQueries.push(this.dropForeignKeySql(table, foreignKey))\n            );\n\n        if (createIndices) {\n            table.indices.forEach((index) => {\n                // new index may be passed without name. In this case we generate index name manually.\n                if (!index.name)\n                    index.name = this.connection.namingStrategy.indexName(\n                        table.name,\n                        index.columnNames,\n                        index.where\n                    );\n                upQueries.push(this.createIndexSql(table, index));\n                downQueries.push(this.dropIndexSql(index));\n            });\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Drops the table.\n     */\n    async dropTable(\n        tableOrName: Table | string,\n        ifExist?: boolean,\n        dropForeignKeys: boolean = true,\n        dropIndices: boolean = true\n    ): Promise<void> {\n        // It needs because if table does not exist and dropForeignKeys or dropIndices is true, we don't need\n        // to perform drop queries for foreign keys and indices.\n        if (ifExist) {\n            const isTableExist = await this.hasTable(tableOrName);\n            if (!isTableExist) return Promise.resolve();\n        }\n\n        // if dropTable called with dropForeignKeys = true, we must create foreign keys in down query.\n        const createForeignKeys: boolean = dropForeignKeys;\n        const table =\n            tableOrName instanceof Table\n                ? tableOrName\n                : await this.getCachedTable(tableOrName);\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        if (dropIndices) {\n            table.indices.forEach((index) => {\n                upQueries.push(this.dropIndexSql(index));\n                downQueries.push(this.createIndexSql(table, index));\n            });\n        }\n\n        // if dropForeignKeys is true, we just drop the table, otherwise we also drop table foreign keys.\n        // createTable does not need separate method to create foreign keys, because it create fk's in the same query with table creation.\n        if (dropForeignKeys)\n            table.foreignKeys.forEach((foreignKey) =>\n                upQueries.push(this.dropForeignKeySql(table, foreignKey))\n            );\n\n        upQueries.push(this.dropTableSql(table));\n        downQueries.push(this.createTableSql(table, createForeignKeys));\n\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Creates a new view.\n     */\n    async createView(view: View): Promise<void> {\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        upQueries.push(this.createViewSql(view));\n        upQueries.push(this.insertViewDefinitionSql(view));\n        downQueries.push(this.dropViewSql(view));\n        downQueries.push(this.deleteViewDefinitionSql(view));\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Drops the view.\n     */\n    async dropView(target: View | string): Promise<void> {\n        const viewName = target instanceof View ? target.name : target;\n        const view = await this.getCachedView(viewName);\n\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        upQueries.push(this.deleteViewDefinitionSql(view));\n        upQueries.push(this.dropViewSql(view));\n        downQueries.push(this.insertViewDefinitionSql(view));\n        downQueries.push(this.createViewSql(view));\n        await this.executeQueries(upQueries, downQueries);\n    }\n\n    /**\n     * Renames the given table.\n     */\n    async renameTable(\n        oldTableOrName: Table | string,\n        newTableOrName: Table | string\n    ): Promise<void> {\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n        const oldTable =\n            oldTableOrName instanceof Table\n                ? oldTableOrName\n                : await this.getCachedTable(oldTableOrName);\n        let newTable = oldTable.clone();\n\n        if (newTableOrName instanceof Table) {\n            newTable = newTableOrName;\n        } else {\n            newTable.name = newTableOrName;\n        }\n\n        // rename table\n        upQueries.push(\n            new Query(`RENAME TABLE \"${oldTable.name}\" TO \"${newTable.name}\"`)\n        );\n        downQueries.push(\n            new Query(`RENAME TABLE \"${newTable.name}\" TO \"${oldTable.name}\"`)\n        );\n\n        // rename primary key constraint\n        if (newTable.primaryColumns.length > 0) {\n            const columnNames = newTable.primaryColumns.map(\n                (column) => column.name\n            );\n\n            const oldPkName = this.connection.namingStrategy.primaryKeyName(\n                oldTable,\n                columnNames\n            );\n            const newPkName = this.connection.namingStrategy.primaryKeyName(\n                newTable,\n                columnNames\n            );\n\n            // build queries\n            upQueries.push(\n                new Query(\n                    `ALTER TABLE \"${newTable.name}\" RENAME CONSTRAINT \"${oldPkName}\" TO \"${newPkName}\"`\n                )\n            );\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE \"${newTable.name}\" RENAME CONSTRAINT \"${newPkName}\" TO \"${oldPkName}\"`\n                )\n            );\n        }\n\n        // rename unique constraints\n        newTable.uniques.forEach((unique) => {\n            // build new constraint name\n            const newUniqueName = this.connection.namingStrategy.uniqueConstraintName(\n                newTable,\n                unique.columnNames\n            );\n\n            // build queries\n            upQueries.push(\n                new Query(\n                    `ALTER TABLE \"${newTable.name}\" RENAME CONSTRAINT \"${unique.name}\" TO \"${newUniqueName}\"`\n                )\n            );\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE \"${newTable.name}\" RENAME CONSTRAINT \"${newUniqueName}\" TO \"${unique.name}\"`\n                )\n            );\n\n            // replace constraint name\n            unique.name = newUniqueName;\n        });\n\n        // rename index constraints\n        newTable.indices.forEach((index) => {\n            // build new constraint name\n            const newIndexName = this.connection.namingStrategy.indexName(\n                newTable,\n                index.columnNames,\n                index.where\n            );\n\n            // build queries\n            upQueries.push(\n                new Query(`RENAME INDEX \"${index.name}\" TO \"${newIndexName}\"`)\n            );\n            downQueries.push(\n                new Query(`RENAME INDEX \"${newIndexName}\" TO \"${index.name}\"`)\n            );\n\n            // replace constraint name\n            index.name = newIndexName;\n        });\n\n        // rename foreign key constraints\n        newTable.foreignKeys.forEach((foreignKey) => {\n            // build new constraint name\n            const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(\n                newTable,\n                foreignKey.columnNames,\n                foreignKey.referencedTableName,\n                foreignKey.referencedColumnNames\n            );\n\n            // build queries\n            upQueries.push(\n                new Query(\n                    `ALTER TABLE \"${newTable.name}\" RENAME CONSTRAINT \"${foreignKey.name}\" TO \"${newForeignKeyName}\"`\n                )\n            );\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE \"${newTable.name}\" RENAME CONSTRAINT \"${newForeignKeyName}\" TO \"${foreignKey.name}\"`\n                )\n            );\n\n            // replace constraint name\n            foreignKey.name = newForeignKeyName;\n        });\n\n        await this.executeQueries(upQueries, downQueries);\n\n        // rename old table and replace it in cached tabled;\n        oldTable.name = newTable.name;\n        this.replaceCachedTable(oldTable, newTable);\n    }\n\n    /**\n     * Creates a new column from the column in the table.\n     */\n    async addColumn(\n        tableOrName: Table | string,\n        column: TableColumn\n    ): Promise<void> {\n        const table =\n            tableOrName instanceof Table\n                ? tableOrName\n                : await this.getCachedTable(tableOrName);\n        const clonedTable = table.clone();\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        upQueries.push(\n            new Query(\n                `ALTER TABLE \"${table.name}\" ADD ${this.buildCreateColumnSql(\n                    column\n                )}`\n            )\n        );\n        downQueries.push(\n            new Query(\n                `ALTER TABLE \"${table.name}\" DROP COLUMN \"${column.name}\"`\n            )\n        );\n\n        // create or update primary key constraint\n        if (column.isPrimary) {\n            const primaryColumns = clonedTable.primaryColumns;\n            // if table already have primary key, me must drop it and recreate again\n            if (primaryColumns.length > 0) {\n                const pkName = this.connection.namingStrategy.primaryKeyName(\n                    clonedTable.name,\n                    primaryColumns.map((column) => column.name)\n                );\n                const columnNames = primaryColumns\n                    .map((column) => `\"${column.name}\"`)\n                    .join(\", \");\n                upQueries.push(\n                    new Query(\n                        `ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${pkName}\"`\n                    )\n                );\n                downQueries.push(\n                    new Query(\n                        `ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`\n                    )\n                );\n            }\n\n            primaryColumns.push(column);\n            const pkName = this.connection.namingStrategy.primaryKeyName(\n                clonedTable.name,\n                primaryColumns.map((column) => column.name)\n            );\n            const columnNames = primaryColumns\n                .map((column) => `\"${column.name}\"`)\n                .join(\", \");\n            upQueries.push(\n                new Query(\n                    `ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`\n                )\n            );\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${pkName}\"`\n                )\n            );\n        }\n\n        // create column index\n        const columnIndex = clonedTable.indices.find(\n            (index) =>\n                index.columnNames.length === 1 &&\n                index.columnNames[0] === column.name\n        );\n        if (columnIndex) {\n            clonedTable.indices.splice(\n                clonedTable.indices.indexOf(columnIndex),\n                1\n            );\n            upQueries.push(this.createIndexSql(table, columnIndex));\n            downQueries.push(this.dropIndexSql(columnIndex));\n        }\n\n        // create unique constraint\n        if (column.isUnique) {\n            const uniqueConstraint = new TableUnique({\n                name: this.connection.namingStrategy.uniqueConstraintName(\n                    table.name,\n                    [column.name]\n                ),\n                columnNames: [column.name],\n            });\n            clonedTable.uniques.push(uniqueConstraint);\n            upQueries.push(\n                new Query(\n                    `ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${uniqueConstraint.name}\" UNIQUE (\"${column.name}\")`\n                )\n            );\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${uniqueConstraint.name}\"`\n                )\n            );\n        }\n\n        await this.executeQueries(upQueries, downQueries);\n\n        clonedTable.addColumn(column);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Creates a new columns from the column in the table.\n     */\n    async addColumns(\n        tableOrName: Table | string,\n        columns: TableColumn[]\n    ): Promise<void> {\n        for (const column of columns) {\n            await this.addColumn(tableOrName, column);\n        }\n    }\n\n    /**\n     * Renames column in the given table.\n     */\n    async renameColumn(\n        tableOrName: Table | string,\n        oldTableColumnOrName: TableColumn | string,\n        newTableColumnOrName: TableColumn | string\n    ): Promise<void> {\n        const table =\n            tableOrName instanceof Table\n                ? tableOrName\n                : await this.getCachedTable(tableOrName);\n        const oldColumn =\n            oldTableColumnOrName instanceof TableColumn\n                ? oldTableColumnOrName\n                : table.columns.find((c) => c.name === oldTableColumnOrName);\n        if (!oldColumn)\n            throw new Error(\n                `Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`\n            );\n\n        let newColumn: TableColumn | undefined = undefined;\n        if (newTableColumnOrName instanceof TableColumn) {\n            newColumn = newTableColumnOrName;\n        } else {\n            newColumn = oldColumn.clone();\n            newColumn.name = newTableColumnOrName;\n        }\n\n        await this.changeColumn(table, oldColumn, newColumn);\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumn(\n        tableOrName: Table | string,\n        oldTableColumnOrName: TableColumn | string,\n        newColumn: TableColumn\n    ): Promise<void> {\n        const table =\n            tableOrName instanceof Table\n                ? tableOrName\n                : await this.getCachedTable(tableOrName);\n        let clonedTable = table.clone();\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        const oldColumn =\n            oldTableColumnOrName instanceof TableColumn\n                ? oldTableColumnOrName\n                : table.columns.find(\n                      (column) => column.name === oldTableColumnOrName\n                  );\n        if (!oldColumn)\n            throw new Error(\n                `Column \"${oldTableColumnOrName}\" was not found in the \"${table.name}\" table.`\n            );\n\n        if (\n            (newColumn.isGenerated !== oldColumn.isGenerated &&\n                newColumn.generationStrategy !== \"uuid\") ||\n            oldColumn.type !== newColumn.type ||\n            oldColumn.length !== newColumn.length\n        ) {\n            // DB2 does not support changing of IDENTITY column, so we must drop column and recreate it again.\n            // Also, we recreate column if column type changed\n            await this.dropColumn(table, oldColumn);\n            await this.addColumn(table, newColumn);\n\n            // update cloned table\n            clonedTable = table.clone();\n        } else {\n            if (newColumn.name !== oldColumn.name) {\n                // rename column\n                upQueries.push(\n                    new Query(\n                        `ALTER TABLE \"${table.name}\" RENAME COLUMN \"${oldColumn.name}\" TO \"${newColumn.name}\"`\n                    )\n                );\n                downQueries.push(\n                    new Query(\n                        `ALTER TABLE \"${table.name}\" RENAME COLUMN \"${newColumn.name}\" TO \"${oldColumn.name}\"`\n                    )\n                );\n\n                // rename column primary key constraint\n                if (oldColumn.isPrimary === true) {\n                    const primaryColumns = clonedTable.primaryColumns;\n\n                    // build old primary constraint name\n                    const columnNames = primaryColumns.map(\n                        (column) => column.name\n                    );\n                    const oldPkName = this.connection.namingStrategy.primaryKeyName(\n                        clonedTable,\n                        columnNames\n                    );\n\n                    // replace old column name with new column name\n                    columnNames.splice(columnNames.indexOf(oldColumn.name), 1);\n                    columnNames.push(newColumn.name);\n\n                    // build new primary constraint name\n                    const newPkName = this.connection.namingStrategy.primaryKeyName(\n                        clonedTable,\n                        columnNames\n                    );\n\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE \"${table.name}\" RENAME CONSTRAINT \"${oldPkName}\" TO \"${newPkName}\"`\n                        )\n                    );\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE \"${table.name}\" RENAME CONSTRAINT \"${newPkName}\" TO \"${oldPkName}\"`\n                        )\n                    );\n                }\n\n                // rename unique constraints\n                clonedTable.findColumnUniques(oldColumn).forEach((unique) => {\n                    // build new constraint name\n                    unique.columnNames.splice(\n                        unique.columnNames.indexOf(oldColumn.name),\n                        1\n                    );\n                    unique.columnNames.push(newColumn.name);\n                    const newUniqueName = this.connection.namingStrategy.uniqueConstraintName(\n                        clonedTable,\n                        unique.columnNames\n                    );\n\n                    // build queries\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE \"${table.name}\" RENAME CONSTRAINT \"${unique.name}\" TO \"${newUniqueName}\"`\n                        )\n                    );\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE \"${table.name}\" RENAME CONSTRAINT \"${newUniqueName}\" TO \"${unique.name}\"`\n                        )\n                    );\n\n                    // replace constraint name\n                    unique.name = newUniqueName;\n                });\n\n                // rename index constraints\n                clonedTable.findColumnIndices(oldColumn).forEach((index) => {\n                    // build new constraint name\n                    index.columnNames.splice(\n                        index.columnNames.indexOf(oldColumn.name),\n                        1\n                    );\n                    index.columnNames.push(newColumn.name);\n                    const newIndexName = this.connection.namingStrategy.indexName(\n                        clonedTable,\n                        index.columnNames,\n                        index.where\n                    );\n\n                    // build queries\n                    upQueries.push(\n                        new Query(\n                            `RENAME INDEX \"${index.name}\" TO \"${newIndexName}\"`\n                        )\n                    );\n                    downQueries.push(\n                        new Query(\n                            `RENAME INDEX \"${newIndexName}\" TO \"${index.name}\"`\n                        )\n                    );\n\n                    // replace constraint name\n                    index.name = newIndexName;\n                });\n\n                // rename foreign key constraints\n                clonedTable\n                    .findColumnForeignKeys(oldColumn)\n                    .forEach((foreignKey) => {\n                        // build new constraint name\n                        foreignKey.columnNames.splice(\n                            foreignKey.columnNames.indexOf(oldColumn.name),\n                            1\n                        );\n                        foreignKey.columnNames.push(newColumn.name);\n                        const newForeignKeyName = this.connection.namingStrategy.foreignKeyName(\n                            clonedTable,\n                            foreignKey.columnNames,\n                            foreignKey.referencedTableName,\n                            foreignKey.referencedColumnNames\n                        );\n\n                        // build queries\n                        upQueries.push(\n                            new Query(\n                                `ALTER TABLE \"${table.name}\" RENAME CONSTRAINT \"${foreignKey.name}\" TO \"${newForeignKeyName}\"`\n                            )\n                        );\n                        downQueries.push(\n                            new Query(\n                                `ALTER TABLE \"${table.name}\" RENAME CONSTRAINT \"${newForeignKeyName}\" TO \"${foreignKey.name}\"`\n                            )\n                        );\n\n                        // replace constraint name\n                        foreignKey.name = newForeignKeyName;\n                    });\n\n                // rename old column in the Table object\n                const oldTableColumn = clonedTable.columns.find(\n                    (column) => column.name === oldColumn.name\n                );\n                clonedTable.columns[\n                    clonedTable.columns.indexOf(oldTableColumn!)\n                ].name = newColumn.name;\n                oldColumn.name = newColumn.name;\n            }\n\n            if (this.isColumnChanged(oldColumn, newColumn, true)) {\n                let defaultUp: string = \"\";\n                let defaultDown: string = \"\";\n                let nullableUp: string = \"\";\n                let nullableDown: string = \"\";\n\n                // changing column default\n                if (\n                    newColumn.default !== null &&\n                    newColumn.default !== undefined\n                ) {\n                    defaultUp = `DEFAULT ${newColumn.default}`;\n\n                    if (\n                        oldColumn.default !== null &&\n                        oldColumn.default !== undefined\n                    ) {\n                        defaultDown = `DEFAULT ${oldColumn.default}`;\n                    } else {\n                        defaultDown = \"DEFAULT NULL\";\n                    }\n                } else if (\n                    oldColumn.default !== null &&\n                    oldColumn.default !== undefined\n                ) {\n                    defaultUp = \"DEFAULT NULL\";\n                    defaultDown = `DEFAULT ${oldColumn.default}`;\n                }\n\n                // changing column isNullable property\n                if (newColumn.isNullable !== oldColumn.isNullable) {\n                    if (newColumn.isNullable === true) {\n                        nullableUp = \"NULL\";\n                        nullableDown = \"NOT NULL\";\n                    } else {\n                        nullableUp = \"NOT NULL\";\n                        nullableDown = \"NULL\";\n                    }\n                }\n\n                upQueries.push(\n                    new Query(\n                        `ALTER TABLE \"${table.name}\" MODIFY \"${\n                            oldColumn.name\n                        }\" ${this.connection.driver.createFullType(\n                            newColumn\n                        )} ${defaultUp} ${nullableUp}`\n                    )\n                );\n                downQueries.push(\n                    new Query(\n                        `ALTER TABLE \"${table.name}\" MODIFY \"${\n                            oldColumn.name\n                        }\" ${this.connection.driver.createFullType(\n                            oldColumn\n                        )} ${defaultDown} ${nullableDown}`\n                    )\n                );\n            }\n\n            if (newColumn.isPrimary !== oldColumn.isPrimary) {\n                const primaryColumns = clonedTable.primaryColumns;\n\n                // if primary column state changed, we must always drop existed constraint.\n                if (primaryColumns.length > 0) {\n                    const pkName = this.connection.namingStrategy.primaryKeyName(\n                        clonedTable.name,\n                        primaryColumns.map((column) => column.name)\n                    );\n                    const columnNames = primaryColumns\n                        .map((column) => `\"${column.name}\"`)\n                        .join(\", \");\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${pkName}\"`\n                        )\n                    );\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`\n                        )\n                    );\n                }\n\n                if (newColumn.isPrimary === true) {\n                    primaryColumns.push(newColumn);\n                    // update column in table\n                    const column = clonedTable.columns.find(\n                        (column) => column.name === newColumn.name\n                    );\n                    column!.isPrimary = true;\n                    const pkName = this.connection.namingStrategy.primaryKeyName(\n                        clonedTable.name,\n                        primaryColumns.map((column) => column.name)\n                    );\n                    const columnNames = primaryColumns\n                        .map((column) => `\"${column.name}\"`)\n                        .join(\", \");\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`\n                        )\n                    );\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${pkName}\"`\n                        )\n                    );\n                } else {\n                    const primaryColumn = primaryColumns.find(\n                        (c) => c.name === newColumn.name\n                    );\n                    primaryColumns.splice(\n                        primaryColumns.indexOf(primaryColumn!),\n                        1\n                    );\n\n                    // update column in table\n                    const column = clonedTable.columns.find(\n                        (column) => column.name === newColumn.name\n                    );\n                    column!.isPrimary = false;\n\n                    // if we have another primary keys, we must recreate constraint.\n                    if (primaryColumns.length > 0) {\n                        const pkName = this.connection.namingStrategy.primaryKeyName(\n                            clonedTable.name,\n                            primaryColumns.map((column) => column.name)\n                        );\n                        const columnNames = primaryColumns\n                            .map((column) => `\"${column.name}\"`)\n                            .join(\", \");\n                        upQueries.push(\n                            new Query(\n                                `ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`\n                            )\n                        );\n                        downQueries.push(\n                            new Query(\n                                `ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${pkName}\"`\n                            )\n                        );\n                    }\n                }\n            }\n\n            if (newColumn.isUnique !== oldColumn.isUnique) {\n                if (newColumn.isUnique === true) {\n                    const uniqueConstraint = new TableUnique({\n                        name: this.connection.namingStrategy.uniqueConstraintName(\n                            table.name,\n                            [newColumn.name]\n                        ),\n                        columnNames: [newColumn.name],\n                    });\n                    clonedTable.uniques.push(uniqueConstraint);\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${uniqueConstraint.name}\" UNIQUE (\"${newColumn.name}\")`\n                        )\n                    );\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${uniqueConstraint.name}\"`\n                        )\n                    );\n                } else {\n                    const uniqueConstraint = clonedTable.uniques.find(\n                        (unique) => {\n                            return (\n                                unique.columnNames.length === 1 &&\n                                !!unique.columnNames.find(\n                                    (columnName) =>\n                                        columnName === newColumn.name\n                                )\n                            );\n                        }\n                    );\n                    clonedTable.uniques.splice(\n                        clonedTable.uniques.indexOf(uniqueConstraint!),\n                        1\n                    );\n                    upQueries.push(\n                        new Query(\n                            `ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${\n                                uniqueConstraint!.name\n                            }\"`\n                        )\n                    );\n                    downQueries.push(\n                        new Query(\n                            `ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${\n                                uniqueConstraint!.name\n                            }\" UNIQUE (\"${newColumn.name}\")`\n                        )\n                    );\n                }\n            }\n\n            await this.executeQueries(upQueries, downQueries);\n            this.replaceCachedTable(table, clonedTable);\n        }\n    }\n\n    /**\n     * Changes a column in the table.\n     */\n    async changeColumns(\n        tableOrName: Table | string,\n        changedColumns: { newColumn: TableColumn; oldColumn: TableColumn }[]\n    ): Promise<void> {\n        for (const { oldColumn, newColumn } of changedColumns) {\n            await this.changeColumn(tableOrName, oldColumn, newColumn);\n        }\n    }\n\n    /**\n     * Drops column in the table.\n     */\n    async dropColumn(\n        tableOrName: Table | string,\n        columnOrName: TableColumn | string\n    ): Promise<void> {\n        const table =\n            tableOrName instanceof Table\n                ? tableOrName\n                : await this.getCachedTable(tableOrName);\n        const column =\n            columnOrName instanceof TableColumn\n                ? columnOrName\n                : table.findColumnByName(columnOrName);\n        if (!column)\n            throw new Error(\n                `Column \"${columnOrName}\" was not found in table \"${table.name}\"`\n            );\n\n        const clonedTable = table.clone();\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        // drop primary key constraint\n        if (column.isPrimary) {\n            const pkName = this.connection.namingStrategy.primaryKeyName(\n                clonedTable.name,\n                clonedTable.primaryColumns.map((column) => column.name)\n            );\n            const columnNames = clonedTable.primaryColumns\n                .map((primaryColumn) => `\"${primaryColumn.name}\"`)\n                .join(\", \");\n            upQueries.push(\n                new Query(\n                    `ALTER TABLE \"${clonedTable.name}\" DROP CONSTRAINT \"${pkName}\"`\n                )\n            );\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE \"${clonedTable.name}\" ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`\n                )\n            );\n\n            // update column in table\n            const tableColumn = clonedTable.findColumnByName(column.name);\n            tableColumn!.isPrimary = false;\n\n            // if primary key have multiple columns, we must recreate it without dropped column\n            if (clonedTable.primaryColumns.length > 0) {\n                const pkName = this.connection.namingStrategy.primaryKeyName(\n                    clonedTable.name,\n                    clonedTable.primaryColumns.map((column) => column.name)\n                );\n                const columnNames = clonedTable.primaryColumns\n                    .map((primaryColumn) => `\"${primaryColumn.name}\"`)\n                    .join(\", \");\n                upQueries.push(\n                    new Query(\n                        `ALTER TABLE \"${clonedTable.name}\" ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNames})`\n                    )\n                );\n                downQueries.push(\n                    new Query(\n                        `ALTER TABLE \"${clonedTable.name}\" DROP CONSTRAINT \"${pkName}\"`\n                    )\n                );\n            }\n        }\n\n        // drop column index\n        const columnIndex = clonedTable.indices.find(\n            (index) =>\n                index.columnNames.length === 1 &&\n                index.columnNames[0] === column.name\n        );\n        if (columnIndex) {\n            upQueries.push(this.dropIndexSql(columnIndex));\n            downQueries.push(this.createIndexSql(table, columnIndex));\n        }\n\n        // drop column check\n        const columnCheck = clonedTable.checks.find(\n            (check) =>\n                !!check.columnNames &&\n                check.columnNames.length === 1 &&\n                check.columnNames[0] === column.name\n        );\n        if (columnCheck) {\n            clonedTable.checks.splice(\n                clonedTable.checks.indexOf(columnCheck),\n                1\n            );\n            upQueries.push(this.dropCheckConstraintSql(table, columnCheck));\n            downQueries.push(this.createCheckConstraintSql(table, columnCheck));\n        }\n\n        // drop column unique\n        const columnUnique = clonedTable.uniques.find(\n            (unique) =>\n                unique.columnNames.length === 1 &&\n                unique.columnNames[0] === column.name\n        );\n        if (columnUnique) {\n            clonedTable.uniques.splice(\n                clonedTable.uniques.indexOf(columnUnique),\n                1\n            );\n            upQueries.push(this.dropUniqueConstraintSql(table, columnUnique));\n            downQueries.push(\n                this.createUniqueConstraintSql(table, columnUnique)\n            );\n        }\n\n        upQueries.push(\n            new Query(\n                `ALTER TABLE \"${table.name}\" DROP COLUMN \"${column.name}\"`\n            )\n        );\n        downQueries.push(\n            new Query(\n                `ALTER TABLE \"${table.name}\" ADD ${this.buildCreateColumnSql(\n                    column\n                )}`\n            )\n        );\n\n        await this.executeQueries(upQueries, downQueries);\n\n        clonedTable.removeColumn(column);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Drops the columns in the table.\n     */\n    async dropColumns(\n        tableOrName: Table | string,\n        columns: TableColumn[]\n    ): Promise<void> {\n        for (const column of columns) {\n            await this.dropColumn(tableOrName, column);\n        }\n    }\n\n    /**\n     * Creates a new primary key.\n     */\n    async createPrimaryKey(\n        tableOrName: Table | string,\n        columnNames: string[]\n    ): Promise<void> {\n        const table =\n            tableOrName instanceof Table\n                ? tableOrName\n                : await this.getCachedTable(tableOrName);\n        const clonedTable = table.clone();\n\n        const up = this.createPrimaryKeySql(table, columnNames);\n\n        // mark columns as primary, because dropPrimaryKeySql build constraint name from table primary column names.\n        clonedTable.columns.forEach((column) => {\n            if (columnNames.find((columnName) => columnName === column.name))\n                column.isPrimary = true;\n        });\n        const down = this.dropPrimaryKeySql(clonedTable);\n\n        await this.executeQueries(up, down);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Updates composite primary keys.\n     */\n    async updatePrimaryKeys(\n        tableOrName: Table | string,\n        columns: TableColumn[]\n    ): Promise<void> {\n        const table =\n            tableOrName instanceof Table\n                ? tableOrName\n                : await this.getCachedTable(tableOrName);\n        const columnNames = columns.map((column) => column.name);\n        const clonedTable = table.clone();\n        const upQueries: Query[] = [];\n        const downQueries: Query[] = [];\n\n        // if table already have primary columns, we must drop them.\n        const primaryColumns = clonedTable.primaryColumns;\n        if (primaryColumns.length > 0) {\n            const pkName = this.connection.namingStrategy.primaryKeyName(\n                clonedTable.name,\n                primaryColumns.map((column) => column.name)\n            );\n            const columnNamesString = primaryColumns\n                .map((column) => `\"${column.name}\"`)\n                .join(\", \");\n            upQueries.push(\n                new Query(\n                    `ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${pkName}\"`\n                )\n            );\n            downQueries.push(\n                new Query(\n                    `ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`\n                )\n            );\n        }\n\n        // update columns in table.\n        clonedTable.columns\n            .filter((column) => columnNames.indexOf(column.name) !== -1)\n            .forEach((column) => (column.isPrimary = true));\n\n        const pkName = this.connection.namingStrategy.primaryKeyName(\n            clonedTable.name,\n            columnNames\n        );\n        const columnNamesString = columnNames\n            .map((columnName) => `\"${columnName}\"`)\n            .join(\", \");\n        upQueries.push(\n            new Query(\n                `ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${pkName}\" PRIMARY KEY (${columnNamesString})`\n            )\n        );\n        downQueries.push(\n            new Query(`ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${pkName}\"`)\n        );\n\n        await this.executeQueries(upQueries, downQueries);\n        this.replaceCachedTable(table, clonedTable);\n    }\n\n    /**\n     * Drops a primary key.\n     */\n    async dropPrimaryKey(tableOrName: Table | string): Promise<void> {\n        const table =\n            tableOrName instanceof Table\n                ? tableOrName\n                : await this.getCachedTable(tableOrName);\n        const up = this.dropPrimaryKeySql(table);\n        const down = this.createPrimaryKeySql(\n            table,\n            table.primaryColumns.map((column) => column.name)\n        );\n        await this.executeQueries(up, down);\n        table.primaryColumns.forEach((column) => {\n            column.isPrimary = false;\n        });\n    }\n\n    /**\n     * Creates a new unique constraint.\n     */\n    async createUniqueConstraint(\n        tableOrName: Table | string,\n        uniqueConstraint: TableUnique\n    ): Promise<void> {\n        const table =\n            tableOrName instanceof Table\n                ? tableOrName\n                : await this.getCachedTable(tableOrName);\n\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\n        if (!uniqueConstraint.name)\n            uniqueConstraint.name = this.connection.namingStrategy.uniqueConstraintName(\n                table.name,\n                uniqueConstraint.columnNames\n            );\n\n        const up = this.createUniqueConstraintSql(table, uniqueConstraint);\n        const down = this.dropUniqueConstraintSql(table, uniqueConstraint);\n        await this.executeQueries(up, down);\n        table.addUniqueConstraint(uniqueConstraint);\n    }\n\n    /**\n     * Creates a new unique constraints.\n     */\n    async createUniqueConstraints(\n        tableOrName: Table | string,\n        uniqueConstraints: TableUnique[]\n    ): Promise<void> {\n        const promises = uniqueConstraints.map((uniqueConstraint) =>\n            this.createUniqueConstraint(tableOrName, uniqueConstraint)\n        );\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops an unique constraint.\n     */\n    async dropUniqueConstraint(\n        tableOrName: Table | string,\n        uniqueOrName: TableUnique | string\n    ): Promise<void> {\n        const table =\n            tableOrName instanceof Table\n                ? tableOrName\n                : await this.getCachedTable(tableOrName);\n        const uniqueConstraint =\n            uniqueOrName instanceof TableUnique\n                ? uniqueOrName\n                : table.uniques.find((u) => u.name === uniqueOrName);\n        if (!uniqueConstraint)\n            throw new Error(\n                `Supplied unique constraint was not found in table ${table.name}`\n            );\n\n        const up = this.dropUniqueConstraintSql(table, uniqueConstraint);\n        const down = this.createUniqueConstraintSql(table, uniqueConstraint);\n        await this.executeQueries(up, down);\n        table.removeUniqueConstraint(uniqueConstraint);\n    }\n\n    /**\n     * Creates an unique constraints.\n     */\n    async dropUniqueConstraints(\n        tableOrName: Table | string,\n        uniqueConstraints: TableUnique[]\n    ): Promise<void> {\n        const promises = uniqueConstraints.map((uniqueConstraint) =>\n            this.dropUniqueConstraint(tableOrName, uniqueConstraint)\n        );\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates new check constraint.\n     */\n    async createCheckConstraint(\n        tableOrName: Table | string,\n        checkConstraint: TableCheck\n    ): Promise<void> {\n        const table =\n            tableOrName instanceof Table\n                ? tableOrName\n                : await this.getCachedTable(tableOrName);\n\n        // new unique constraint may be passed without name. In this case we generate unique name manually.\n        if (!checkConstraint.name)\n            checkConstraint.name = this.connection.namingStrategy.checkConstraintName(\n                table.name,\n                checkConstraint.expression!\n            );\n\n        const up = this.createCheckConstraintSql(table, checkConstraint);\n        const down = this.dropCheckConstraintSql(table, checkConstraint);\n        await this.executeQueries(up, down);\n        table.addCheckConstraint(checkConstraint);\n    }\n\n    /**\n     * Creates new check constraints.\n     */\n    async createCheckConstraints(\n        tableOrName: Table | string,\n        checkConstraints: TableCheck[]\n    ): Promise<void> {\n        const promises = checkConstraints.map((checkConstraint) =>\n            this.createCheckConstraint(tableOrName, checkConstraint)\n        );\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops check constraint.\n     */\n    async dropCheckConstraint(\n        tableOrName: Table | string,\n        checkOrName: TableCheck | string\n    ): Promise<void> {\n        const table =\n            tableOrName instanceof Table\n                ? tableOrName\n                : await this.getCachedTable(tableOrName);\n        const checkConstraint =\n            checkOrName instanceof TableCheck\n                ? checkOrName\n                : table.checks.find((c) => c.name === checkOrName);\n        if (!checkConstraint)\n            throw new Error(\n                `Supplied check constraint was not found in table ${table.name}`\n            );\n\n        const up = this.dropCheckConstraintSql(table, checkConstraint);\n        const down = this.createCheckConstraintSql(table, checkConstraint);\n        await this.executeQueries(up, down);\n        table.removeCheckConstraint(checkConstraint);\n    }\n\n    /**\n     * Drops check constraints.\n     */\n    async dropCheckConstraints(\n        tableOrName: Table | string,\n        checkConstraints: TableCheck[]\n    ): Promise<void> {\n        const promises = checkConstraints.map((checkConstraint) =>\n            this.dropCheckConstraint(tableOrName, checkConstraint)\n        );\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates a new exclusion constraint.\n     */\n    async createExclusionConstraint(\n        tableOrName: Table | string,\n        exclusionConstraint: TableExclusion\n    ): Promise<void> {\n        throw new Error(`DB2 does not support exclusion constraints.`);\n    }\n\n    /**\n     * Creates a new exclusion constraints.\n     */\n    async createExclusionConstraints(\n        tableOrName: Table | string,\n        exclusionConstraints: TableExclusion[]\n    ): Promise<void> {\n        throw new Error(`DB2 does not support exclusion constraints.`);\n    }\n\n    /**\n     * Drops exclusion constraint.\n     */\n    async dropExclusionConstraint(\n        tableOrName: Table | string,\n        exclusionOrName: TableExclusion | string\n    ): Promise<void> {\n        throw new Error(`DB2 does not support exclusion constraints.`);\n    }\n\n    /**\n     * Drops exclusion constraints.\n     */\n    async dropExclusionConstraints(\n        tableOrName: Table | string,\n        exclusionConstraints: TableExclusion[]\n    ): Promise<void> {\n        throw new Error(`DB2 does not support exclusion constraints.`);\n    }\n\n    /**\n     * Creates a new foreign key.\n     */\n    async createForeignKey(\n        tableOrName: Table | string,\n        foreignKey: TableForeignKey\n    ): Promise<void> {\n        const table =\n            tableOrName instanceof Table\n                ? tableOrName\n                : await this.getCachedTable(tableOrName);\n\n        // new FK may be passed without name. In this case we generate FK name manually.\n        if (!foreignKey.name)\n            foreignKey.name = this.connection.namingStrategy.foreignKeyName(\n                table.name,\n                foreignKey.columnNames,\n                foreignKey.referencedTableName,\n                foreignKey.referencedColumnNames\n            );\n\n        const up = this.createForeignKeySql(table, foreignKey);\n        const down = this.dropForeignKeySql(table, foreignKey);\n        await this.executeQueries(up, down);\n        table.addForeignKey(foreignKey);\n    }\n\n    /**\n     * Creates a new foreign keys.\n     */\n    async createForeignKeys(\n        tableOrName: Table | string,\n        foreignKeys: TableForeignKey[]\n    ): Promise<void> {\n        const promises = foreignKeys.map((foreignKey) =>\n            this.createForeignKey(tableOrName, foreignKey)\n        );\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops a foreign key from the table.\n     */\n    async dropForeignKey(\n        tableOrName: Table | string,\n        foreignKeyOrName: TableForeignKey | string\n    ): Promise<void> {\n        const table =\n            tableOrName instanceof Table\n                ? tableOrName\n                : await this.getCachedTable(tableOrName);\n        const foreignKey =\n            foreignKeyOrName instanceof TableForeignKey\n                ? foreignKeyOrName\n                : table.foreignKeys.find((fk) => fk.name === foreignKeyOrName);\n        if (!foreignKey)\n            throw new Error(\n                `Supplied foreign key was not found in table ${table.name}`\n            );\n\n        const up = this.dropForeignKeySql(table, foreignKey);\n        const down = this.createForeignKeySql(table, foreignKey);\n        await this.executeQueries(up, down);\n        table.removeForeignKey(foreignKey);\n    }\n\n    /**\n     * Drops a foreign keys from the table.\n     */\n    async dropForeignKeys(\n        tableOrName: Table | string,\n        foreignKeys: TableForeignKey[]\n    ): Promise<void> {\n        const promises = foreignKeys.map((foreignKey) =>\n            this.dropForeignKey(tableOrName, foreignKey)\n        );\n        await Promise.all(promises);\n    }\n\n    /**\n     * Creates a new index.\n     */\n    async createIndex(\n        tableOrName: Table | string,\n        index: TableIndex\n    ): Promise<void> {\n        const table =\n            tableOrName instanceof Table\n                ? tableOrName\n                : await this.getCachedTable(tableOrName);\n\n        // new index may be passed without name. In this case we generate index name manually.\n        if (!index.name)\n            index.name = this.connection.namingStrategy.indexName(\n                table.name,\n                index.columnNames,\n                index.where\n            );\n\n        const up = this.createIndexSql(table, index);\n        const down = this.dropIndexSql(index);\n        await this.executeQueries(up, down);\n        table.addIndex(index);\n    }\n\n    /**\n     * Creates a new indices\n     */\n    async createIndices(\n        tableOrName: Table | string,\n        indices: TableIndex[]\n    ): Promise<void> {\n        const promises = indices.map((index) =>\n            this.createIndex(tableOrName, index)\n        );\n        await Promise.all(promises);\n    }\n\n    /**\n     * Drops an index from the table.\n     */\n    async dropIndex(\n        tableOrName: Table | string,\n        indexOrName: TableIndex | string\n    ): Promise<void> {\n        const table =\n            tableOrName instanceof Table\n                ? tableOrName\n                : await this.getCachedTable(tableOrName);\n        const index =\n            indexOrName instanceof TableIndex\n                ? indexOrName\n                : table.indices.find((i) => i.name === indexOrName);\n        if (!index)\n            throw new Error(\n                `Supplied index was not found in table ${table.name}`\n            );\n\n        const up = this.dropIndexSql(index);\n        const down = this.createIndexSql(table, index);\n        await this.executeQueries(up, down);\n        table.removeIndex(index);\n    }\n\n    /**\n     * Drops an indices from the table.\n     */\n    async dropIndices(\n        tableOrName: Table | string,\n        indices: TableIndex[]\n    ): Promise<void> {\n        const promises = indices.map((index) =>\n            this.dropIndex(tableOrName, index)\n        );\n        await Promise.all(promises);\n    }\n\n    /**\n     * Clears all table contents.\n     * Note: this operation uses SQL's TRUNCATE query which cannot be reverted in transactions.\n     */\n    async clearTable(tableName: string): Promise<void> {\n        await this.query(`TRUNCATE TABLE \"${tableName}\"`);\n    }\n\n    /**\n     * Removes all tables from the currently connected database.\n     */\n    async clearDatabase(): Promise<void> {\n        await this.startTransaction();\n        try {\n            const dropViewsQuery = `SELECT 'DROP VIEW \"' || VIEW_NAME || '\"' AS \"query\" FROM \"USER_VIEWS\"`;\n            const dropViewQueries: ObjectLiteral[] = await this.query(\n                dropViewsQuery\n            );\n            await Promise.all(\n                dropViewQueries.map((query) => this.query(query[\"query\"]))\n            );\n\n            const dropTablesQuery = `SELECT 'DROP TABLE \"' || TABLE_NAME || '\" CASCADE CONSTRAINTS' AS \"query\" FROM \"USER_TABLES\"`;\n            const dropTableQueries: ObjectLiteral[] = await this.query(\n                dropTablesQuery\n            );\n            await Promise.all(\n                dropTableQueries.map((query) => this.query(query[\"query\"]))\n            );\n            await this.commitTransaction();\n        } catch (error) {\n            try {\n                // we throw original error even if rollback thrown an error\n                await this.rollbackTransaction();\n            } catch (rollbackError) {}\n            throw error;\n        }\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    protected async loadViews(viewNames: string[]): Promise<View[]> {\n        const hasTable = await this.hasTable(\n            this.getTypeormMetadataTableName()\n        );\n        if (!hasTable) return Promise.resolve([]);\n\n        const viewNamesString = viewNames\n            .map((viewName) => {\n                let [schema, name] = viewName.split(\".\");\n                if (!name) {\n                    name = schema;\n                    schema = this.driver.options.schema;\n                }\n                return `(\"t\".\"schema\" = '${schema}' AND \"t\".\"name\" = '${name}')`;\n            })\n            .join(\" OR \");\n        let query = `SELECT \"T\".* FROM \"${this.getTypeormMetadataTableName()}\" \"T\" INNER JOIN \"SYSCAT\".\"INDEXES\" \"V\" ON \"V\".\"TBNAME\" = \"T\".\"NAME\" WHERE \"T\".\"INDEXTYPE\" = '1'`;\n        if (viewNamesString.length > 0) query += ` AND (${viewNamesString})`;\n        const dbViews = await this.query(query);\n        return dbViews.map((dbView: any) => {\n            const view = new View();\n            view.name = dbView[\"name\"];\n            view.expression = dbView[\"value\"];\n            return view;\n        });\n    }\n\n    /**\n     * Loads all tables (with given names) from the database and creates a Table from them.\n     */\n    protected async loadTables(tableNames: string[]): Promise<Table[]> {\n        // if no tables given then no need to proceed\n        if (!tableNames || !tableNames.length) return [];\n\n        /** @warn Not finished */\n\n        // load tables, columns, indices and foreign keys\n        const tableNamesString = tableNames\n            .map((name) => \"'\" + name + \"'\")\n            .join(\", \");\n        const tablesSql = `SELECT * FROM \"SYSCAT\".\"TABLES\" WHERE \"NAME\" IN (${tableNamesString})`;\n        const columnsSql = `SELECT * FROM \"SYSCAT\".\"COLUMNS\" WHERE \"NAME\" IN (${tableNamesString})`;\n\n        const indicesSql =\n            `SELECT \"IND\".\"INDNAME\", \"IND\".\"TBNAME\", \"IND\".\"UNIQUERULE\" as \"UNIQUENESS\", ` +\n            `LISTAGG (\"COL\".\"NAME\", ',') WITHIN GROUP (ORDER BY \"COL\".\"NAME\") AS \"COLUMN_NAMES\" ` +\n            `FROM \"SYSCAT\".\"INDEXES\" \"IND\" ` +\n            `INNER JOIN \"SYSCAT\".\"COLUMNS\" \"COL\" ON \"COL\".\"INDEX_NAME\" = \"IND\".\"INDEX_NAME\" ` +\n            // `LEFT JOIN \"USER_CONSTRAINTS\" \"CON\" ON \"CON\".\"CONSTRAINT_NAME\" = \"IND\".\"INDEX_NAME\" ` +\n            `WHERE \"IND\".\"TABLE_NAME\" IN (${tableNamesString}) ` +\n            // `AND \"CON\".\"CONSTRAINT_NAME\" IS NULL ` +\n            `GROUP BY \"IND\".\"NAME\", \"IND\".\"TBNAME\", \"IND\".\"UNIQUERULE\"`;\n\n        const foreignKeysSql =\n            `SELECT \"C\".\"CONSTRAINT_NAME\", \"C\".\"TABLE_NAME\", \"COL\".\"COLUMN_NAME\", \"REF_COL\".\"TABLE_NAME\" AS \"REFERENCED_TABLE_NAME\", ` +\n            `\"REF_COL\".\"COLUMN_NAME\" AS \"REFERENCED_COLUMN_NAME\", \"C\".\"DELETE_RULE\" AS \"ON_DELETE\" ` +\n            `FROM \"SYSIBM\".\"SYSFOREIGNKEYS\" \"C\" ` +\n            `INNER JOIN \"USER_CONS_COLUMNS\" \"COL\" ON \"COL\".\"OWNER\" = \"C\".\"OWNER\" AND \"COL\".\"CONSTRAINT_NAME\" = \"C\".\"CONSTRAINT_NAME\" ` +\n            `INNER JOIN \"USER_CONS_COLUMNS\" \"REF_COL\" ON \"REF_COL\".\"OWNER\" = \"C\".\"R_OWNER\" AND \"REF_COL\".\"CONSTRAINT_NAME\" = \"C\".\"R_CONSTRAINT_NAME\" AND \"REF_COL\".\"POSITION\" = \"COL\".\"POSITION\" ` +\n            `WHERE \"C\".\"TABLE_NAME\" IN (${tableNamesString}) AND \"C\".\"CONSTRAINT_TYPE\" = 'R'`;\n\n        const constraintsSql =\n            `SELECT \"C\".\"CONSTRAINT_NAME\", \"C\".\"CONSTRAINT_TYPE\", \"C\".\"TABLE_NAME\", \"COL\".\"COLUMN_NAME\", \"C\".\"SEARCH_CONDITION\" ` +\n            `FROM \"USER_CONSTRAINTS\" \"C\" ` +\n            `INNER JOIN \"USER_CONS_COLUMNS\" \"COL\" ON \"COL\".\"OWNER\" = \"C\".\"OWNER\" AND \"COL\".\"CONSTRAINT_NAME\" = \"C\".\"CONSTRAINT_NAME\" ` +\n            `WHERE \"C\".\"TABLE_NAME\" IN (${tableNamesString}) AND \"C\".\"CONSTRAINT_TYPE\" IN ('C', 'U', 'P') AND \"C\".\"GENERATED\" = 'USER NAME'`;\n\n        const [\n            dbTables,\n            dbColumns,\n            dbIndices,\n            dbForeignKeys,\n            dbConstraints,\n        ]: ObjectLiteral[][] = await Promise.all([\n            this.query(tablesSql),\n            this.query(columnsSql),\n            this.query(indicesSql),\n            this.query(foreignKeysSql),\n            this.query(constraintsSql),\n        ]);\n\n        // if tables were not found in the db, no need to proceed\n        if (!dbTables.length) return [];\n\n        // create tables for loaded tables\n        return dbTables.map((dbTable) => {\n            const table = new Table();\n            table.name = dbTable[\"TABLE_NAME\"];\n\n            // create columns from the loaded columns\n            table.columns = dbColumns\n                .filter((dbColumn) => dbColumn[\"TABLE_NAME\"] === table.name)\n                .map((dbColumn) => {\n                    const columnConstraints = dbConstraints.filter(\n                        (dbConstraint) =>\n                            dbConstraint[\"TABLE_NAME\"] === table.name &&\n                            dbConstraint[\"COLUMN_NAME\"] ===\n                                dbColumn[\"COLUMN_NAME\"]\n                    );\n\n                    const uniqueConstraint = columnConstraints.find(\n                        (constraint) => constraint[\"CONSTRAINT_TYPE\"] === \"U\"\n                    );\n                    const isConstraintComposite = uniqueConstraint\n                        ? !!dbConstraints.find(\n                              (dbConstraint) =>\n                                  dbConstraint[\"CONSTRAINT_TYPE\"] === \"U\" &&\n                                  dbConstraint[\"CONSTRAINT_NAME\"] ===\n                                      uniqueConstraint[\"CONSTRAINT_NAME\"] &&\n                                  dbConstraint[\"COLUMN_NAME\"] !==\n                                      dbColumn[\"COLUMN_NAME\"]\n                          )\n                        : false;\n                    const isUnique =\n                        !!uniqueConstraint && !isConstraintComposite;\n\n                    const isPrimary = !!columnConstraints.find(\n                        (constraint) => constraint[\"CONSTRAINT_TYPE\"] === \"P\"\n                    );\n\n                    const tableColumn = new TableColumn();\n                    tableColumn.name = dbColumn[\"COLUMN_NAME\"];\n                    tableColumn.type = dbColumn[\"DATA_TYPE\"].toLowerCase();\n                    if (tableColumn.type.indexOf(\"(\") !== -1)\n                        tableColumn.type = tableColumn.type.replace(\n                            /\\([0-9]*\\)/,\n                            \"\"\n                        );\n\n                    // check only columns that have length property\n                    if (\n                        this.driver.withLengthColumnTypes.indexOf(\n                            tableColumn.type as ColumnType\n                        ) !== -1\n                    ) {\n                        const length =\n                            tableColumn.type === \"raw\"\n                                ? dbColumn[\"DATA_LENGTH\"]\n                                : dbColumn[\"CHAR_COL_DECL_LENGTH\"];\n                        tableColumn.length =\n                            length &&\n                            !this.isDefaultColumnLength(\n                                table,\n                                tableColumn,\n                                length\n                            )\n                                ? length.toString()\n                                : \"\";\n                    }\n\n                    if (\n                        tableColumn.type === \"number\" ||\n                        tableColumn.type === \"float\"\n                    ) {\n                        if (\n                            dbColumn[\"DATA_PRECISION\"] !== null &&\n                            !this.isDefaultColumnPrecision(\n                                table,\n                                tableColumn,\n                                dbColumn[\"DATA_PRECISION\"]\n                            )\n                        )\n                            tableColumn.precision = dbColumn[\"DATA_PRECISION\"];\n                        if (\n                            dbColumn[\"DATA_SCALE\"] !== null &&\n                            !this.isDefaultColumnScale(\n                                table,\n                                tableColumn,\n                                dbColumn[\"DATA_SCALE\"]\n                            )\n                        )\n                            tableColumn.scale = dbColumn[\"DATA_SCALE\"];\n                    } else if (\n                        (tableColumn.type === \"timestamp\" ||\n                            tableColumn.type === \"timestamp with time zone\" ||\n                            tableColumn.type ===\n                                \"timestamp with local time zone\") &&\n                        dbColumn[\"DATA_SCALE\"] !== null\n                    ) {\n                        tableColumn.precision = !this.isDefaultColumnPrecision(\n                            table,\n                            tableColumn,\n                            dbColumn[\"DATA_SCALE\"]\n                        )\n                            ? dbColumn[\"DATA_SCALE\"]\n                            : undefined;\n                    }\n\n                    tableColumn.default =\n                        dbColumn[\"DATA_DEFAULT\"] !== null &&\n                        dbColumn[\"DATA_DEFAULT\"] !== undefined &&\n                        dbColumn[\"DATA_DEFAULT\"].trim() !== \"NULL\"\n                            ? (tableColumn.default = dbColumn[\n                                  \"DATA_DEFAULT\"\n                              ].trim())\n                            : undefined;\n\n                    tableColumn.isNullable = dbColumn[\"NULLABLE\"] === \"Y\";\n                    tableColumn.isUnique = isUnique;\n                    tableColumn.isPrimary = isPrimary;\n                    tableColumn.isGenerated =\n                        dbColumn[\"IDENTITY_COLUMN\"] === \"YES\";\n                    if (tableColumn.isGenerated) {\n                        tableColumn.generationStrategy = \"increment\";\n                        tableColumn.default = undefined;\n                    }\n                    tableColumn.comment = \"\"; // todo\n                    return tableColumn;\n                });\n\n            // find unique constraints of table, group them by constraint name and build TableUnique.\n            const tableUniqueConstraints = OrmUtils.uniq(\n                dbConstraints.filter((dbConstraint) => {\n                    return (\n                        dbConstraint[\"TABLE_NAME\"] === table.name &&\n                        dbConstraint[\"CONSTRAINT_TYPE\"] === \"U\"\n                    );\n                }),\n                (dbConstraint) => dbConstraint[\"CONSTRAINT_NAME\"]\n            );\n\n            table.uniques = tableUniqueConstraints.map((constraint) => {\n                const uniques = dbConstraints.filter(\n                    (dbC) =>\n                        dbC[\"CONSTRAINT_NAME\"] === constraint[\"CONSTRAINT_NAME\"]\n                );\n                return new TableUnique({\n                    name: constraint[\"CONSTRAINT_NAME\"],\n                    columnNames: uniques.map((u) => u[\"COLUMN_NAME\"]),\n                });\n            });\n\n            // find check constraints of table, group them by constraint name and build TableCheck.\n            const tableCheckConstraints = OrmUtils.uniq(\n                dbConstraints.filter((dbConstraint) => {\n                    return (\n                        dbConstraint[\"TABLE_NAME\"] === table.name &&\n                        dbConstraint[\"CONSTRAINT_TYPE\"] === \"C\"\n                    );\n                }),\n                (dbConstraint) => dbConstraint[\"CONSTRAINT_NAME\"]\n            );\n\n            table.checks = tableCheckConstraints.map((constraint) => {\n                const checks = dbConstraints.filter(\n                    (dbC) =>\n                        dbC[\"CONSTRAINT_NAME\"] === constraint[\"CONSTRAINT_NAME\"]\n                );\n                return new TableCheck({\n                    name: constraint[\"CONSTRAINT_NAME\"],\n                    columnNames: checks.map((c) => c[\"COLUMN_NAME\"]),\n                    expression: constraint[\"SEARCH_CONDITION\"],\n                });\n            });\n\n            // find foreign key constraints of table, group them by constraint name and build TableForeignKey.\n            const tableForeignKeyConstraints = OrmUtils.uniq(\n                dbForeignKeys.filter((dbForeignKey) => {\n                    return dbForeignKey[\"TABLE_NAME\"] === table.name;\n                }),\n                (dbForeignKey) => dbForeignKey[\"CONSTRAINT_NAME\"]\n            );\n\n            table.foreignKeys = tableForeignKeyConstraints.map(\n                (dbForeignKey) => {\n                    const foreignKeys = dbForeignKeys.filter(\n                        (dbFk) =>\n                            dbFk[\"CONSTRAINT_NAME\"] ===\n                            dbForeignKey[\"CONSTRAINT_NAME\"]\n                    );\n                    return new TableForeignKey({\n                        name: dbForeignKey[\"CONSTRAINT_NAME\"],\n                        columnNames: foreignKeys.map(\n                            (dbFk) => dbFk[\"COLUMN_NAME\"]\n                        ),\n                        referencedTableName:\n                            dbForeignKey[\"REFERENCED_TABLE_NAME\"],\n                        referencedColumnNames: foreignKeys.map(\n                            (dbFk) => dbFk[\"REFERENCED_COLUMN_NAME\"]\n                        ),\n                        onDelete: dbForeignKey[\"ON_DELETE\"],\n                        onUpdate: \"NO ACTION\", // DB2 does not have onUpdate option in FK's, but we need it for proper synchronization\n                    });\n                }\n            );\n\n            // create TableIndex objects from the loaded indices\n            table.indices = dbIndices\n                .filter((dbIndex) => dbIndex[\"TABLE_NAME\"] === table.name)\n                .map((dbIndex) => {\n                    return new TableIndex({\n                        name: dbIndex[\"INDEX_NAME\"],\n                        columnNames: dbIndex[\"COLUMN_NAMES\"].split(\",\"),\n                        isUnique: dbIndex[\"UNIQUENESS\"] === \"UNIQUE\",\n                    });\n                });\n\n            return table;\n        });\n    }\n\n    /**\n     * Builds and returns SQL for create table.\n     */\n    protected createTableSql(table: Table, createForeignKeys?: boolean): Query {\n        const columnDefinitions = table.columns\n            .map((column) => this.buildCreateColumnSql(column))\n            .join(\", \");\n        let sql = `CREATE TABLE \"${table.name}\" (${columnDefinitions}`;\n\n        table.columns\n            .filter((column) => column.isUnique)\n            .forEach((column) => {\n                const isUniqueExist = table.uniques.some(\n                    (unique) =>\n                        unique.columnNames.length === 1 &&\n                        unique.columnNames[0] === column.name\n                );\n                if (!isUniqueExist)\n                    table.uniques.push(\n                        new TableUnique({\n                            name: this.connection.namingStrategy.uniqueConstraintName(\n                                table.name,\n                                [column.name]\n                            ),\n                            columnNames: [column.name],\n                        })\n                    );\n            });\n\n        if (table.uniques.length > 0) {\n            const uniquesSql = table.uniques\n                .map((unique) => {\n                    const uniqueName = unique.name\n                        ? unique.name\n                        : this.connection.namingStrategy.uniqueConstraintName(\n                              table.name,\n                              unique.columnNames\n                          );\n                    const columnNames = unique.columnNames\n                        .map((columnName) => `\"${columnName}\"`)\n                        .join(\", \");\n                    return `CONSTRAINT \"${uniqueName}\" UNIQUE (${columnNames})`;\n                })\n                .join(\", \");\n\n            sql += `, ${uniquesSql}`;\n        }\n\n        if (table.checks.length > 0) {\n            const checksSql = table.checks\n                .map((check) => {\n                    const checkName = check.name\n                        ? check.name\n                        : this.connection.namingStrategy.checkConstraintName(\n                              table.name,\n                              check.expression!\n                          );\n                    return `CONSTRAINT \"${checkName}\" CHECK (${check.expression})`;\n                })\n                .join(\", \");\n\n            sql += `, ${checksSql}`;\n        }\n\n        if (table.foreignKeys.length > 0 && createForeignKeys) {\n            const foreignKeysSql = table.foreignKeys\n                .map((fk) => {\n                    const columnNames = fk.columnNames\n                        .map((columnName) => `\"${columnName}\"`)\n                        .join(\", \");\n                    if (!fk.name)\n                        fk.name = this.connection.namingStrategy.foreignKeyName(\n                            table.name,\n                            fk.columnNames,\n                            fk.referencedTableName,\n                            fk.referencedColumnNames\n                        );\n                    const referencedColumnNames = fk.referencedColumnNames\n                        .map((columnName) => `\"${columnName}\"`)\n                        .join(\", \");\n                    let constraint = `CONSTRAINT \"${fk.name}\" FOREIGN KEY (${columnNames}) REFERENCES \"${fk.referencedTableName}\" (${referencedColumnNames})`;\n                    if (fk.onDelete && fk.onDelete !== \"NO ACTION\")\n                        // DB2 does not support NO ACTION, but we set NO ACTION by default in EntityMetadata\n                        constraint += ` ON DELETE ${fk.onDelete}`;\n\n                    return constraint;\n                })\n                .join(\", \");\n\n            sql += `, ${foreignKeysSql}`;\n        }\n\n        const primaryColumns = table.columns.filter(\n            (column) => column.isPrimary\n        );\n        if (primaryColumns.length > 0) {\n            const primaryKeyName = this.connection.namingStrategy.primaryKeyName(\n                table.name,\n                primaryColumns.map((column) => column.name)\n            );\n            const columnNames = primaryColumns\n                .map((column) => `\"${column.name}\"`)\n                .join(\", \");\n            sql += `, CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNames})`;\n        }\n\n        sql += `)`;\n\n        return new Query(sql);\n    }\n\n    /**\n     * Builds drop table sql.\n     */\n    protected dropTableSql(\n        tableOrName: Table | string,\n        ifExist?: boolean\n    ): Query {\n        const tableName =\n            tableOrName instanceof Table ? tableOrName.name : tableOrName;\n        const query = ifExist\n            ? `DROP TABLE IF EXISTS \"${tableName}\"`\n            : `DROP TABLE \"${tableName}\"`;\n        return new Query(query);\n    }\n\n    protected createViewSql(view: View): Query {\n        const materializedClause = view.materialized ? \"MATERIALIZED \" : \"\";\n        if (typeof view.expression === \"string\") {\n            return new Query(\n                `CREATE ${materializedClause}VIEW \"${view.name}\" AS ${view.expression}`\n            );\n        } else {\n            return new Query(\n                `CREATE ${materializedClause}VIEW \"${\n                    view.name\n                }\" AS ${view.expression(this.connection).getQuery()}`\n            );\n        }\n    }\n\n    protected insertViewDefinitionSql(view: View): Query {\n        const expression =\n            typeof view.expression === \"string\"\n                ? view.expression.trim()\n                : view.expression(this.connection).getQuery();\n        const [\n            query,\n            parameters,\n        ] = this.connection\n            .createQueryBuilder()\n            .insert()\n            .into(this.getTypeormMetadataTableName())\n            .values({ type: \"VIEW\", name: view.name, value: expression })\n            .getQueryAndParameters();\n\n        return new Query(query, parameters);\n    }\n\n    /**\n     * Builds drop view sql.\n     */\n    protected dropViewSql(viewOrPath: View | string): Query {\n        const viewName =\n            viewOrPath instanceof View ? viewOrPath.name : viewOrPath;\n        return new Query(`DROP VIEW \"${viewName}\"`);\n    }\n\n    /**\n     * Builds remove view sql.\n     */\n    protected deleteViewDefinitionSql(viewOrPath: View | string): Query {\n        const viewName =\n            viewOrPath instanceof View ? viewOrPath.name : viewOrPath;\n        const qb = this.connection.createQueryBuilder();\n        const [query, parameters] = qb\n            .delete()\n            .from(this.getTypeormMetadataTableName())\n            .where(`${qb.escape(\"type\")} = 'VIEW'`)\n            .andWhere(`${qb.escape(\"name\")} = :name`, { name: viewName })\n            .getQueryAndParameters();\n\n        return new Query(query, parameters);\n    }\n\n    /**\n     * Builds create index sql.\n     */\n    protected createIndexSql(table: Table, index: TableIndex): Query {\n        const columns = index.columnNames\n            .map((columnName) => `\"${columnName}\"`)\n            .join(\", \");\n        return new Query(\n            `CREATE ${index.isUnique ? \"UNIQUE \" : \"\"}INDEX \"${\n                index.name\n            }\" ON \"${table.name}\" (${columns})`\n        );\n    }\n\n    /**\n     * Builds drop index sql.\n     */\n    protected dropIndexSql(indexOrName: TableIndex | string): Query {\n        let indexName =\n            indexOrName instanceof TableIndex ? indexOrName.name : indexOrName;\n        return new Query(`DROP INDEX \"${indexName}\"`);\n    }\n\n    /**\n     * Builds create primary key sql.\n     */\n    protected createPrimaryKeySql(table: Table, columnNames: string[]): Query {\n        const primaryKeyName = this.connection.namingStrategy.primaryKeyName(\n            table.name,\n            columnNames\n        );\n        const columnNamesString = columnNames\n            .map((columnName) => `\"${columnName}\"`)\n            .join(\", \");\n        return new Query(\n            `ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${primaryKeyName}\" PRIMARY KEY (${columnNamesString})`\n        );\n    }\n\n    /**\n     * Builds drop primary key sql.\n     */\n    protected dropPrimaryKeySql(table: Table): Query {\n        const columnNames = table.primaryColumns.map((column) => column.name);\n        const primaryKeyName = this.connection.namingStrategy.primaryKeyName(\n            table.name,\n            columnNames\n        );\n        return new Query(\n            `ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${primaryKeyName}\"`\n        );\n    }\n\n    /**\n     * Builds create unique constraint sql.\n     */\n    protected createUniqueConstraintSql(\n        table: Table,\n        uniqueConstraint: TableUnique\n    ): Query {\n        const columnNames = uniqueConstraint.columnNames\n            .map((column) => `\"` + column + `\"`)\n            .join(\", \");\n        return new Query(\n            `ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${uniqueConstraint.name}\" UNIQUE (${columnNames})`\n        );\n    }\n\n    /**\n     * Builds drop unique constraint sql.\n     */\n    protected dropUniqueConstraintSql(\n        table: Table,\n        uniqueOrName: TableUnique | string\n    ): Query {\n        const uniqueName =\n            uniqueOrName instanceof TableUnique\n                ? uniqueOrName.name\n                : uniqueOrName;\n        return new Query(\n            `ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${uniqueName}\"`\n        );\n    }\n\n    /**\n     * Builds create check constraint sql.\n     */\n    protected createCheckConstraintSql(\n        table: Table,\n        checkConstraint: TableCheck\n    ): Query {\n        return new Query(\n            `ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${checkConstraint.name}\" CHECK (${checkConstraint.expression})`\n        );\n    }\n\n    /**\n     * Builds drop check constraint sql.\n     */\n    protected dropCheckConstraintSql(\n        table: Table,\n        checkOrName: TableCheck | string\n    ): Query {\n        const checkName =\n            checkOrName instanceof TableCheck ? checkOrName.name : checkOrName;\n        return new Query(\n            `ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${checkName}\"`\n        );\n    }\n\n    /**\n     * Builds create foreign key sql.\n     */\n    protected createForeignKeySql(\n        table: Table,\n        foreignKey: TableForeignKey\n    ): Query {\n        const columnNames = foreignKey.columnNames\n            .map((column) => `\"` + column + `\"`)\n            .join(\", \");\n        const referencedColumnNames = foreignKey.referencedColumnNames\n            .map((column) => `\"` + column + `\"`)\n            .join(\",\");\n        let sql =\n            `ALTER TABLE \"${table.name}\" ADD CONSTRAINT \"${foreignKey.name}\" FOREIGN KEY (${columnNames}) ` +\n            `REFERENCES \"${foreignKey.referencedTableName}\" (${referencedColumnNames})`;\n        // DB2 does not support NO ACTION, but we set NO ACTION by default in EntityMetadata\n        if (foreignKey.onDelete && foreignKey.onDelete !== \"NO ACTION\")\n            sql += ` ON DELETE ${foreignKey.onDelete}`;\n\n        return new Query(sql);\n    }\n\n    /**\n     * Builds drop foreign key sql.\n     */\n    protected dropForeignKeySql(\n        table: Table,\n        foreignKeyOrName: TableForeignKey | string\n    ): Query {\n        const foreignKeyName =\n            foreignKeyOrName instanceof TableForeignKey\n                ? foreignKeyOrName.name\n                : foreignKeyOrName;\n        return new Query(\n            `ALTER TABLE \"${table.name}\" DROP CONSTRAINT \"${foreignKeyName}\"`\n        );\n    }\n\n    /**\n     * Builds a query for create column.\n     */\n    protected buildCreateColumnSql(column: TableColumn) {\n        let c =\n            `\"${column.name}\" ` + this.connection.driver.createFullType(column);\n        if (column.charset) c += \" CHARACTER SET \" + column.charset;\n        if (column.collation) c += \" COLLATE \" + column.collation;\n        if (column.default !== undefined && column.default !== null)\n            // DEFAULT must be placed before NOT NULL\n            c += \" DEFAULT \" + column.default;\n        if (column.isNullable !== true && !column.isGenerated)\n            // NOT NULL is not supported with GENERATED\n            c += \" NOT NULL\";\n        if (\n            column.isGenerated === true &&\n            column.generationStrategy === \"increment\"\n        )\n            c += \" GENERATED BY DEFAULT AS IDENTITY\";\n\n        return c;\n    }\n}\n"],"sourceRoot":"../.."}