{"version":3,"sources":["../../src/driver/DriverFactory.ts"],"names":[],"mappings":";;AAAA,kEAAiE;AACjE,iEAAgE;AAChE,qDAAoD;AACpD,+DAA8D;AAC9D,sDAAqD;AACrD,sDAAqD;AACrD,yDAAwD;AACxD,sEAAqE;AACrE,wEAAuE;AACvE,mDAAkD;AAClD,mDAAkD;AAClD,4DAA2D;AAC3D,gDAA+C;AAC/C,6EAA4E;AAC5E,gGAA+F;AAG/F,6CAA4C;AAC5C,4EAA2E;AAC3E,6CAA4C;AAE5C;;GAEG;AACH;IAAA;IA+CA,CAAC;IA9CG;;OAEG;IACH,8BAAM,GAAN,UAAO,UAAsB;QACjB,IAAA,8BAAI,CAAwB;QACpC,QAAQ,IAAI,EAAE;YACV,KAAK,OAAO;gBACR,OAAO,IAAI,yBAAW,CAAC,UAAU,CAAC,CAAC;YACvC,KAAK,UAAU;gBACX,OAAO,IAAI,+BAAc,CAAC,UAAU,CAAC,CAAC;YAC1C,KAAK,aAAa;gBACd,OAAO,IAAI,iCAAe,CAAC,UAAU,CAAC,CAAC;YAC3C,KAAK,KAAK;gBACN,OAAO,IAAI,qBAAS,CAAC,UAAU,CAAC,CAAC;YACrC,KAAK,SAAS;gBACV,OAAO,IAAI,yBAAW,CAAC,UAAU,CAAC,CAAC;YACvC,KAAK,QAAQ;gBACT,OAAO,IAAI,2BAAY,CAAC,UAAU,CAAC,CAAC;YACxC,KAAK,gBAAgB;gBACjB,OAAO,IAAI,yCAAmB,CAAC,UAAU,CAAC,CAAC;YAC/C,KAAK,SAAS;gBACV,OAAO,IAAI,6BAAa,CAAC,UAAU,CAAC,CAAC;YACzC,KAAK,cAAc;gBACf,OAAO,IAAI,uCAAkB,CAAC,UAAU,CAAC,CAAC;YAC9C,KAAK,cAAc;gBACf,OAAO,IAAI,qCAAiB,CAAC,UAAU,CAAC,CAAC;YAC7C,KAAK,OAAO;gBACR,OAAO,IAAI,yBAAW,CAAC,UAAU,CAAC,CAAC;YACvC,KAAK,QAAQ;gBACT,OAAO,IAAI,2BAAY,CAAC,UAAU,CAAC,CAAC;YACxC,KAAK,OAAO;gBACR,OAAO,IAAI,iCAAe,CAAC,UAAU,CAAC,CAAC;YAC3C,KAAK,SAAS;gBACV,OAAO,IAAI,yBAAW,CAAC,UAAU,CAAC,CAAC;YACvC,KAAK,MAAM;gBACP,OAAO,IAAI,uBAAU,CAAC,UAAU,CAAC,CAAC;YACtC,KAAK,iBAAiB;gBAClB,OAAO,IAAI,yCAAmB,CAAC,UAAU,CAAC,CAAC;YAC/C,KAAK,oBAAoB;gBACrB,OAAO,IAAI,yDAA2B,CAAC,UAAU,CAAC,CAAC;YACvD,KAAK,KAAK;gBACN,OAAO,IAAI,qBAAS,CAAC,UAAU,CAAC,CAAC;YACrC;gBACI,MAAM,IAAI,uCAAkB,CAAC,IAAI,CAAC,CAAC;SAC1C;IACL,CAAC;IACL,oBAAC;AAAD,CA/CA,AA+CC,IAAA;AA/CY,sCAAa","file":"DriverFactory.js","sourcesContent":["import { MissingDriverError } from \"../error/MissingDriverError\";\nimport { CockroachDriver } from \"./cockroachdb/CockroachDriver\";\nimport { MongoDriver } from \"./mongodb/MongoDriver\";\nimport { SqlServerDriver } from \"./sqlserver/SqlServerDriver\";\nimport { OracleDriver } from \"./oracle/OracleDriver\";\nimport { SqliteDriver } from \"./sqlite/SqliteDriver\";\nimport { CordovaDriver } from \"./cordova/CordovaDriver\";\nimport { ReactNativeDriver } from \"./react-native/ReactNativeDriver\";\nimport { NativescriptDriver } from \"./nativescript/NativescriptDriver\";\nimport { SqljsDriver } from \"./sqljs/SqljsDriver\";\nimport { MysqlDriver } from \"./mysql/MysqlDriver\";\nimport { PostgresDriver } from \"./postgres/PostgresDriver\";\nimport { ExpoDriver } from \"./expo/ExpoDriver\";\nimport { AuroraDataApiDriver } from \"./aurora-data-api/AuroraDataApiDriver\";\nimport { AuroraDataApiPostgresDriver } from \"./aurora-data-api-pg/AuroraDataApiPostgresDriver\";\nimport { Driver } from \"./Driver\";\nimport { Connection } from \"../connection/Connection\";\nimport { SapDriver } from \"./sap/SapDriver\";\nimport { BetterSqlite3Driver } from \"./better-sqlite3/BetterSqlite3Driver\";\nimport { DB2Driver } from \"./db2/DB2Driver\";\n\n/**\n * Helps to create drivers.\n */\nexport class DriverFactory {\n    /**\n     * Creates a new driver depend on a given connection's driver type.\n     */\n    create(connection: Connection): Driver {\n        const { type } = connection.options;\n        switch (type) {\n            case \"mysql\":\n                return new MysqlDriver(connection);\n            case \"postgres\":\n                return new PostgresDriver(connection);\n            case \"cockroachdb\":\n                return new CockroachDriver(connection);\n            case \"sap\":\n                return new SapDriver(connection);\n            case \"mariadb\":\n                return new MysqlDriver(connection);\n            case \"sqlite\":\n                return new SqliteDriver(connection);\n            case \"better-sqlite3\":\n                return new BetterSqlite3Driver(connection);\n            case \"cordova\":\n                return new CordovaDriver(connection);\n            case \"nativescript\":\n                return new NativescriptDriver(connection);\n            case \"react-native\":\n                return new ReactNativeDriver(connection);\n            case \"sqljs\":\n                return new SqljsDriver(connection);\n            case \"oracle\":\n                return new OracleDriver(connection);\n            case \"mssql\":\n                return new SqlServerDriver(connection);\n            case \"mongodb\":\n                return new MongoDriver(connection);\n            case \"expo\":\n                return new ExpoDriver(connection);\n            case \"aurora-data-api\":\n                return new AuroraDataApiDriver(connection);\n            case \"aurora-data-api-pg\":\n                return new AuroraDataApiPostgresDriver(connection);\n            case \"db2\":\n                return new DB2Driver(connection);\n            default:\n                throw new MissingDriverError(type);\n        }\n    }\n}\n"],"sourceRoot":".."}